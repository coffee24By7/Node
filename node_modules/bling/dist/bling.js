// Generated by CoffeeScript 2.4.1
(function() {
  var $, Bling, extend,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf,
    splice = [].splice;

  Object.keys || (Object.keys = (o) => {
    var k, results;
    results = [];
    for (k in o) {
      results.push(k);
    }
    return results;
  });

  Object.values || (Object.values = (o) => {
    var k, results;
    results = [];
    for (k in o) {
      results.push(o[k]);
    }
    return results;
  });

  extend = (a, ...b) => {
    var i1, k, len1, obj, v;
    for (i1 = 0, len1 = b.length; i1 < len1; i1++) {
      obj = b[i1];
      if (obj) {
        for (k in obj) {
          v = obj[k];
          a[k] = v;
        }
      }
    }
    return a;
  };

  Bling = function(...args) {
    "Bling:nomunge";
    var b, i;
    if (args.length === 1) {
      args = $.type.lookup(args[0]).array(args[0]);
    }
    b = $.inherit(Bling, args);
    if (args.length === 0 && args[0] !== void 0) {
      i = 0;
      while (args[i] !== void 0) {
        i++;
      }
      b.length = i;
    }
    if ('init' in Bling) {
      return Bling.init(b);
    }
    return b;
  };

  $ = Bling;

  $.global = (function() {
    return this;
  })();

  $.plugin = function(opts, constructor) {
    var _t, error, key, plugin, ref, ref1;
    if (!constructor) {
      constructor = opts;
      opts = {};
    }
    _t = this;
    if ("depends" in opts) {
      return _t.depends(opts.depends, function() {
        return _t.plugin({
          provides: opts.provides
        }, constructor);
      });
    }
    try {
      if (typeof (plugin = constructor != null ? constructor.call(_t, _t) : void 0) === "object") {
        extend(this, plugin.$);
        delete plugin.$;
        extend(_t.prototype, plugin);
        for (key in plugin) {
          (function(key) {
            return _t[key] || (_t[key] = function(...a) {
              return _t.prototype[key].apply($(a[0]), a.slice(1));
            });
          })(key);
        }
        if (opts.provides != null) {
          _t.provide(opts.provides);
        }
      }
    } catch (error1) {
      error = error1;
      console.error(`plugin failed '${_t.name}':`, ((ref = (ref1 = $.debugStack) != null ? ref1 : $.identity) != null ? ref : function(x) {
        return x;
      })(error.stack));
    }
    return this;
  };

  extend($, (function() {
    var commasep, complete, incomplete, not_complete, waiting;
    waiting = [];
    complete = {};
    commasep = /, */;
    not_complete = function(x) {
      return !(x in complete);
    };
    incomplete = function(n) {
      return ((typeof n) === "string" ? n.split(commasep) : n).filter(not_complete);
    };
    return {
      depends: function(needs, func) {
        if ((needs = incomplete(needs)).length === 0) {
          func();
        } else {
          waiting.push(function(need) {
            var i;
            if ((i = needs.indexOf(need)) > -1) {
              needs.splice(i, 1);
            }
            return needs.length === 0 && func;
          });
        }
        return func;
      },
      provide: function(needs, data) {
        var caught, err, f, i, i1, len1, need, ref, ref1, ref2;
        caught = [];
        ref = incomplete(needs);
        for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
          need = ref[i1];
          complete[need] = i = -1;
          while (++i < waiting.length) {
            if ((f = waiting[i](need))) {
              waiting.splice(i, 1);
              try {
                f(data);
              } catch (error1) {
                err = error1;
                caught.push(err);
              }
              i = -1;
            }
          }
        }
        if (caught.length > 0) {
          f = (ref1 = (ref2 = $.debugStack) != null ? ref2 : $.identity) != null ? ref1 : function(x) {
            return x.stack;
          };
          caught.map(f).forEach(console.error.bind(console));
        }
        return data;
      }
    };
  })());

  $.plugin({
    depends: "core",
    provides: "async,series,parallel"
  }, function() {
    return {
      series: function(fin = $.identity) {
        var done, finish_one, next, ret, todo;
        ret = $();
        todo = this.length;
        if (!(todo > 0)) {
          fin.apply(ret, ret);
        } else {
          done = 0;
          finish_one = function(index) {
            return function() {
              ret[index] = arguments;
              if (++done >= todo) {
                fin.apply(ret, ret);
              } else {
                next(done);
              }
              return null;
            };
          };
          (next = (i) => {
            return $.immediate(() => {
              return this[i](finish_one(i));
            });
          })(0);
        }
        return this;
      },
      parallel: function(fin = $.identity) {
        var done, finish_one, i, i1, ref, ret, todo;
        ret = $();
        todo = this.length;
        if (!(todo > 0)) {
          fin.apply(ret, ret);
        } else {
          done = 0;
          finish_one = function(index) {
            return function() {
              ret[index] = arguments;
              if (++done >= todo) {
                fin.apply(ret, ret);
              }
              return null;
            };
          };
          for (i = i1 = 0, ref = todo; i1 < ref; i = i1 += 1) {
            this[i](finish_one(i));
          }
        }
        return this;
      }
    };
  });

  $.plugin({
    provides: "cache, Cache",
    depends: "core, sortBy, logger"
  }, function() {
    var EffCache;
    EffCache = (function() {
      var log;

      class EffCache {
        constructor(capacity = 1000, defaultTtl = 2e308) {
          var autoEvict, eff, index, noValue, order, reIndex, rePosition;
          this.capacity = capacity;
          this.defaultTtl = defaultTtl;
          this.capacity = Math.max(0, this.capacity);
          this.evictCount = Math.max(3, Math.floor(this.capacity * .1));
          index = Object.create(null);
          order = [];
          eff = function(o) {
            return -o.r / o.w;
          };
          autoEvict = () => {
            var k;
            if (!(this.capacity > 0)) {
              return;
            }
            if (order.length >= this.capacity) {
              while (order.length + this.evictCount - 1 >= this.capacity) {
                delete index[k = order.pop().k];
              }
            }
            return null;
          };
          reIndex = function(i, j) {
            var i1, ref, ref1, x;
            for (x = i1 = ref = i, ref1 = j; (ref <= ref1 ? i1 <= ref1 : i1 >= ref1); x = ref <= ref1 ? ++i1 : --i1) {
              if ((0 <= x && x < order.length)) {
                index[order[x].k] = x;
              }
            }
            return null;
          };
          rePosition = function(i) {
            var j, obj;
            obj = order[i];
            j = $.sortedIndex(order, obj, eff);
            if (j !== i) {
              order.splice(i, 1);
              order.splice(j, 0, obj);
              reIndex(i, j);
            }
            return null;
          };
          noValue = {
            v: void 0
          };
          $.extend(this, {
            has: function(k) {
              return k in index;
            },
            del: function(k) {
              var i;
              if (k in index) {
                i = index[k];
                order.splice(i, 1);
                delete index[k];
                return reIndex(i, order.length - 1);
              }
            },
            set: (k, v, ttl = this.defaultTtl) => {
              var d, i, item;
              if (!(this.capacity > 0)) {
                return v;
              }
              if (k in index) {
                d = order[i = index[k]];
                d.v = v;
                d.w += 1;
                rePosition(i);
              } else {
                autoEvict();
                item = {
                  k,
                  v,
                  r: 0,
                  w: 1
                };
                i = $.sortedIndex(order, item, eff);
                order.splice(i, 0, item);
                reIndex(i, order.length - 1);
              }
              if (ttl < 2e308) {
                $.delay(ttl, () => {
                  return this.del(k);
                });
              }
              return v;
            },
            get: function(k) {
              var i, ret;
              ret = noValue;
              if (k in index) {
                i = index[k];
                ret = order[i];
                ret.r += 1;
                rePosition(i);
              }
              return ret.v;
            },
            clear: function() {
              var k;
              for (k in index) {
                order[index[k]] = null;
              }
              index = Object.create(null);
              return order = [];
            }
          });
        }

      };

      log = $.logger("[LRU]");

      return EffCache;

    }).call(this);
    return {
      $: {
        Cache: $.extend(EffCache, new EffCache(10000))
      }
    };
  });

  $.plugin({
    provides: "cartesian"
  }, function() {
    return {
      $: {
        cartesian: function(...sets) {
          var helper, n, ret;
          n = sets.length;
          ret = [];
          helper = function(cur, i) {
            var i1, len1, ref, x;
            if (++i >= n) {
              return ret.push(cur);
            }
            ref = sets[i];
            for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
              x = ref[i1];
              helper(cur.concat(x), i);
            }
            return null;
          };
          helper([], -1);
          return $(ret);
        }
      }
    };
  });

  $.plugin({
    provides: "clone",
    depends: "type"
  }, function() {
    $.type.extend({
      unknown: {
        clone: function(s) {
          return null;
        }
      },
      string: {
        clone: function(s) {
          return s + "";
        }
      },
      number: {
        clone: function(n) {
          return n + 0.0;
        }
      },
      array: {
        clone: function(a) {
          return a.concat([]);
        }
      },
      bling: {
        clone: function(b) {
          return b.concat([]);
        }
      },
      object: {
        clone: function(o) {
          var k, ret, v;
          ret = Object.create(o.__proto__);
          for (k in o) {
            if (!hasProp.call(o, k)) continue;
            v = o[k];
            ret[k] = $.type.lookup(v).clone(v);
          }
          return ret;
        }
      }
    });
    return {
      $: {
        clone: function(o) {
          return $.type.lookup(o).clone(o);
        }
      }
    };
  });

  $.plugin({
    provides: "compat,trimLeft,split,lastIndexOf,join,preventAll,matchesSelector,isBuffer,Map"
  }, function() {
    var Map, base1, base2, base3, base4, base5, base6, signs;
    (base1 = $.global).Buffer || (base1.Buffer = {
      isBuffer: function() {
        return false;
      }
    });
    (base2 = $.global).Map || (base2.Map = Map = class Map {
      constructor(iterable) {
        var data, i1, item, len1, ref;
        data = Object.create(null);
        $.extend(this, {
          size: 0,
          keys: function() {
            return Object.keys(data);
          },
          values: function() {
            var k, results, v;
            results = [];
            for (k in data) {
              v = data[k];
              results.push(v);
            }
            return results;
          },
          entries: function() {
            var k, results, v;
            results = [];
            for (k in data) {
              v = data[k];
              results.push([k, v]);
            }
            return results;
          },
          has: function(k) {
            return k in data;
          },
          get: function(k) {
            return data[k];
          },
          set: function(k, v) {
            if (!(k in data)) {
              this.size += 1;
            }
            data[k] = v;
            return this;
          },
          delete: function(k) {
            if (k in data) {
              this.size -= 1;
            }
            delete data[k];
            return this;
          },
          clear: function() {
            data = Object.create(null);
            this.size = 0;
            return this;
          },
          forEach: function(cb, c) {
            var k, v;
            for (k in data) {
              v = data[k];
              cb.call(c, k, v);
            }
            return this;
          }
        });
        ref = iterable != null ? iterable : [];
        for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
          item = ref[i1];
          this.set(...item);
        }
      }

    });
    signs = [-1, 1];
    Math.sign = function(n) {
      return signs[0 + (n >= 0)];
    };
    (base3 = String.prototype).trimLeft || (base3.trimLeft = function() {
      return this.replace(/^\s+/, "");
    });
    (base4 = String.prototype).split || (base4.split = function(sep) {
      var a, i, j;
      a = [];
      i = 0;
      while ((j = this.indexOf(sep, i)) > -1) {
        a.push(this.substring(i, j));
        i = j + 1;
      }
      return a;
    });
    (base5 = String.prototype).lastIndexOf || (base5.lastIndexOf = function(s, c, i = -1) {
      var j;
      j = -1;
      while ((i = s.indexOf(c, i + 1)) > -1) {
        j = i;
      }
      return j;
    });
    (base6 = Array.prototype).join || (base6.join = function(sep = '') {
      var n, s;
      n = this.length;
      if (n === 0) {
        return "";
      }
      s = this[n - 1];
      while (--n > 0) {
        s = this[n - 1] + sep + s;
      }
      return s;
    });
    if (typeof Event !== "undefined" && Event !== null) {
      Event.prototype.preventAll = function() {
        this.preventDefault();
        this.stopPropagation();
        return this.cancelBubble = true;
      };
    }
    if (typeof Element !== "undefined" && Element !== null) {
      Element.prototype.matchesSelector = Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.matchesSelector;
    }
    return {};
  });

  $.plugin({
    provides: "compress, decompress"
  }, function() {
    var _compress, _decompress, chr, f, pow;
    f = String.fromCharCode;
    chr = function(i) {
      return f(i + 32);
    };
    ({pow} = Math);
    _compress = function(input) {
      var c, data, data_pos, data_val, dict, dictSize, dictToCreate, doBitsAndOne, doSomeBits, enlargeIn, i1, len1, numBits, value, w, wc;
      if (input === null || input === (void 0) || input === "") {
        return input;
      }
      dict = {};
      dictToCreate = {};
      c = "";
      wc = "";
      w = "";
      enlargeIn = 2;
      dictSize = 3;
      numBits = 2;
      data = [];
      data_val = 0;
      data_pos = 0;
      doSomeBits = function(how_many_bits, value = 0) {
        var i, i1, ref;
        for (i = i1 = 0, ref = numBits; i1 < ref; i = i1 += 1) {
          data_val = (data_val << 1) | value;
          if (data_pos === 14) {
            data_pos = 0;
            data.push(chr(data_val));
            data_val = 0;
          } else {
            data_pos++;
          }
          value = 0;
        }
        value = w.charCodeAt(0);
        return doBitsAndOne(how_many_bits, value);
      };
      doBitsAndOne = function(how_many_bits, value = 0) {
        var i, i1, ref, results;
        results = [];
        for (i = i1 = 0, ref = how_many_bits; i1 < ref; i = i1 += 1) {
          data_val = (data_val << 1) | (value & 1);
          if (data_pos === 14) {
            data_pos = 0;
            data.push(chr(data_val));
            data_val = 0;
          } else {
            data_pos++;
          }
          results.push(value = value >> 1);
        }
        return results;
      };
      for (i1 = 0, len1 = input.length; i1 < len1; i1++) {
        c = input[i1];
        if (!(c in dict)) {
          dict[c] = dictSize++;
          dictToCreate[c] = true;
        }
        wc = w + c;
        if (wc in dict) {
          w = wc;
        } else {
          if (w in dictToCreate) {
            if (w.charCodeAt(0) < 256) {
              doSomeBits(8);
            } else {
              doSomeBits(16, 1);
            }
            enlargeIn--;
            if (enlargeIn === 0) {
              enlargeIn = pow(2, numBits);
              numBits++;
            }
            delete dictToCreate[w];
          } else {
            value = dict[w];
            doBitsAndOne(numBits, value);
          }
          enlargeIn--;
          if (enlargeIn === 0) {
            enlargeIn = pow(2, numBits);
            numBits++;
          }
          dict[wc] = dictSize++;
          w = String(c);
        }
      }
      if (w !== "") {
        if (w in dictToCreate) {
          if (w.charCodeAt(0) < 256) {
            doSomeBits(8);
          } else {
            doSomeBits(16, 1);
          }
          enlargeIn--;
          if (enlargeIn === 0) {
            enlargeIn = pow(2, numBits);
            numBits++;
          }
          delete dictToCreate[w];
        } else {
          value = dict[w];
          doBitsAndOne(numBits, value);
        }
        enlargeIn--;
        if (enlargeIn === 0) {
          enlargeIn = pow(2, numBits);
          numBits++;
        }
      }
      doBitsAndOne(numBits, 2);
      while (true) {
        data_val = data_val << 1;
        if (data_pos === 14) {
          data.push(chr(data_val));
          break;
        } else {
          data_pos++;
        }
      }
      return data.join('');
    };
    _decompress = function(length, resetValue, getNextValue) {
      var bits, c, data, dict, dictSize, doBits, enlargeIn, entry, i, next, numBits, resb, result, w;
      if (length === 0) {
        return "";
      }
      dict = [];
      enlargeIn = 4;
      dictSize = 4;
      numBits = 3;
      entry = "";
      result = [];
      next = i = w = resb = c = null;
      data = {
        val: getNextValue(0),
        position: resetValue,
        index: 1
      };
      if (isNaN(data.val) || !isFinite(data.val) || (data.val == null)) {
        return "";
      }
      dict[0] = 0;
      dict[1] = 1;
      dict[2] = 2;
      doBits = function(bits, maxpower, power = 1) {
        var r;
        while (power !== maxpower) {
          resb = data.val & data.position;
          data.position >>= 1;
          if (data.position === 0) {
            data.position = resetValue;
            data.val = getNextValue(data.index++);
          }
          r = resb > 0 ? 1 : 0;
          bits |= r * power;
          power <<= 1;
        }
        return bits;
      };
      bits = doBits(0, 4, 1);
      switch (next = bits) {
        case 0:
        case 1:
          c = f(doBits(0, pow(2, 8 * (c + 1)), 1));
          break;
        case 2:
          return "";
      }
      dict[3] = c;
      w = c;
      result.push(c);
      while (true) {
        if (data.index > length) {
          return "";
        }
        switch (c = doBits(0, pow(2, numBits), 1)) {
          case 0:
          case 1:
            dict[dictSize++] = f(doBits(0, pow(2, 8 * (c + 1)), 1));
            c = dictSize - 1;
            enlargeIn--;
            break;
          case 2:
            return result.join('');
        }
        if (enlargeIn === 0) {
          enlargeIn = pow(2, numBits);
          numBits++;
        }
        if (dict[c]) {
          entry = dict[c];
        } else {
          if (c === dictSize) {
            entry = w + w.charAt(0);
          } else {
            return "";
          }
        }
        result.push(entry);
        dict[dictSize++] = w + entry.charAt(0);
        enlargeIn--;
        w = entry;
        if (enlargeIn === 0) {
          enlargeIn = pow(2, numBits);
          numBits++;
        }
      }
    };
    return {
      $: {
        compress: function(input) {
          if (input) {
            return _compress(input, 15) + " ";
          } else {
            return "";
          }
        },
        decompress: function(input) {
          if (input) {
            return _decompress(input.length, 16384, function(i) {
              return input.charCodeAt(i) - 32;
            });
          } else {
            return "";
          }
        }
      }
    };
  });

  $.plugin({
    provides: 'config',
    depends: 'core'
  }, function() {
    var float, get, int, parse, set, watch;
    get = function(name, def) {
      var ref;
      switch (arguments.length) {
        case 0:
          return $.extend({}, process.env);
        default:
          return (ref = process.env[name]) != null ? ref : def;
      }
    };
    set = function(name, val) {
      switch (arguments.length) {
        case 1:
          return $.extend(process.env, name);
        case 2:
          return process.env[name] = val;
      }
    };
    parse = function(data) {
      var ret;
      ret = {};
      $(data.toString("utf8").split("\n")).filter($.isEmpty, false).filter(/^#/, false).map(function() {
        return this.replace(/^\s+/, '').split('=');
      }).each(function(kv) {
        var ref;
        if ((ref = kv[0]) != null ? ref.length : void 0) {
          return ret[kv[0]] = kv[1].replace(/^["']/, '').replace(/['"]$/, '');
        }
      });
      return ret;
    };
    watch = function(name, func) {
      var prev;
      prev = process.env[name];
      return $.interval(1003, function() {
        var cur;
        if ((cur = process.env[name]) !== prev) {
          func(prev, cur);
          return prev = cur;
        }
      });
    };
    int = function(name, def) {
      var ref;
      return parseInt((ref = process.env[name]) != null ? ref : def, 10);
    };
    float = function(name, def) {
      var ref;
      return parseFloat((ref = process.env[name]) != null ? ref : def);
    };
    return {
      $: {
        config: $.extend(get, {get, set, parse, watch, int, float})
      }
    };
  });

  $.plugin({
    provides: "core,eq,each,map,filterMap,tap,replaceWith,reduce,union,intersect,distinct," + "contains,count,coalesce,swap,shuffle,select,or,zap,clean,take,skip,first,last,slice," + "push,filter,matches,weave,fold,flatten,call,apply,log,toArray,clear,indexWhere",
    depends: "string,type"
  }, function() {
    var index;
    $.defineProperty($, "now", {
      get: function() {
        return +(new Date);
      }
    });
    index = function(i, o) {
      while (i < 0) {
        i += o.length;
      }
      return Math.min(i, o.length);
    };
    return {
      $: {
        assert: function(c, m = "") {
          if (!c) {
            throw new Error(`assertion failed: ${m}`);
          }
        },
        coalesce: function(...a) {
          return $(a).coalesce();
        },
        keysOf: function(o, own = false) {
          var k;
          if (own) {
            return $((function() {
              var results;
              results = [];
              for (k in o) {
                if (!hasProp.call(o, k)) continue;
                results.push(k);
              }
              return results;
            })());
          } else {
            return $((function() {
              var results;
              results = [];
              for (k in o) {
                results.push(k);
              }
              return results;
            })());
          }
        },
        valuesOf: function(o, own = false) {
          var k, v;
          if (own) {
            return $((function() {
              var results;
              results = [];
              for (k in o) {
                if (!hasProp.call(o, k)) continue;
                v = o[k];
                results.push(v);
              }
              return results;
            })());
          } else {
            return $((function() {
              var results;
              results = [];
              for (k in o) {
                v = o[k];
                results.push(v);
              }
              return results;
            })());
          }
        }
      },
      eq: function(i) {
        return $([this[index(i, this)]]);
      },
      each: function(f) {
        var t;
        (function() {
          var i1, len1, ref, results;
          ref = this;
          results = [];
          for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
            t = ref[i1];
            results.push(f.call(t, t));
          }
          return results;
        }).call(this);
        return this;
      },
      map: function(f) {
        var b, i, i1, len1, ref, t;
        b = $();
        i = 0;
        ref = this;
        for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
          t = ref[i1];
          (b[i++] = f.call(t, t));
        }
        return b;
      },
      every: function(f) {
        var i1, len1, ref, x;
        ref = this;
        for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
          x = ref[i1];
          if (!f.call(x, x)) {
            return false;
          }
        }
        return true;
      },
      some: function(f) {
        var i1, len1, ref, x;
        ref = this;
        for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
          x = ref[i1];
          if (f.call(x, x)) {
            return true;
          }
        }
        return false;
      },
      filterMap: function(f) {
        var b, i1, len1, ref, t, v;
        b = $();
        ref = this;
        for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
          t = ref[i1];
          v = f.call(t, t);
          if (v != null) {
            b.push(v);
          }
        }
        return b;
      },
      tap: function(f) {
        return f.call(this, this);
      },
      replaceWith: function(array) {
        var i1, len1, x;
        this.clear();
        for (i1 = 0, len1 = array.length; i1 < len1; i1++) {
          x = array[i1];
          this.push(x);
        }
        return this;
      },
      reduce: function(f, a) {
        var i, i1, n, ref, ref1, x;
        if ((typeof a) === 'function') {
          [f, a] = [a, f];
        }
        i = 0;
        n = this.length;
        if (a == null) {
          a = this[i++];
        }
        for (x = i1 = ref = i, ref1 = n; i1 < ref1; x = i1 += 1) {
          (a = f.call(this[x], a, this[x]));
        }
        return a;
      },
      union: function(other, strict = true) {
        var i1, j1, len1, len2, ref, ret, x;
        ret = $();
        ref = this;
        for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
          x = ref[i1];
          if (!ret.contains(x, strict)) {
            ret.push(x);
          }
        }
        for (j1 = 0, len2 = other.length; j1 < len2; j1++) {
          x = other[j1];
          if (!ret.contains(x, strict)) {
            ret.push(x);
          }
        }
        return ret;
      },
      distinct: function(strict = true) {
        return this.union(this, strict);
      },
      intersect: function(other) {
        var x;
        return $((function() {
          var i1, len1, ref, results;
          ref = this;
          results = [];
          for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
            x = ref[i1];
            if (indexOf.call(other, x) >= 0) {
              results.push(x);
            }
          }
          return results;
        }).call(this));
      },
      contains: function(item, strict = true) {
        var i1, len1, ref, t;
        if (strict) {
          return this.indexOf(item) > -1;
        } else {
          ref = this;
          for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
            t = ref[i1];
            if (t == item) {
              return true;
            }
          }
        }
        return false;
      },
      count: function(item, strict = true) {
        var i1, len1, n, ref, t;
        n = 0;
        ref = this;
        for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
          t = ref[i1];
          if ((item === void 0) || (strict && t === item) || (!strict && t == item)) {
            ++n;
          }
        }
        return n;
      },
      coalesce: function() {
        var i, i1, len1, ref;
        ref = this;
        for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
          i = ref[i1];
          if ($.type.in('array', 'bling', i)) {
            i = $(i).coalesce();
          }
          if (i != null) {
            return i;
          }
        }
        return null;
      },
      swap: function(i, j) {
        i = index(i, this);
        j = index(j, this);
        if (i !== j) {
          [this[i], this[j]] = [this[j], this[i]];
        }
        return this;
      },
      shuffle: function() {
        var i;
        i = this.length - 1;
        while (i >= 0) {
          this.swap(--i, Math.floor(Math.random() * i));
        }
        return this;
      },
      select: (function() {
        var getter, selectMany, selectOne;
        getter = function(prop) {
          return function() {
            var v;
            if ($.is("function", v = this[prop]) && prop !== "constructor") {
              return $.bound(this, v);
            } else {
              return v;
            }
          };
        };
        selectOne = function(p) {
          var i, type;
          switch (type = $.type(p)) {
            case 'regexp':
              return selectMany.call(this, p);
            case 'string':
            case 'number':
              p = String(p);
              if (p === "*") {
                return this.flatten();
              } else if ((i = p.indexOf('.')) > -1) {
                return this.select(p.substr(0, i)).select(p.substr(i + 1));
              } else {
                return this.map(getter(p));
              }
              break;
            default:
              return $();
          }
        };
        selectMany = function(...a) {
          var i, i1, j1, len1, len2, lists, match, n, p, ref;
          n = this.length;
          lists = Object.create(null);
          for (i1 = 0, len1 = a.length; i1 < len1; i1++) {
            p = a[i1];
            if ($.is('regexp', p)) {
              ref = $.keysOf(this[0]).filter(p);
              for (j1 = 0, len2 = ref.length; j1 < len2; j1++) {
                match = ref[j1];
                lists[match] = this.select(match);
              }
            } else {
              lists[p] = this.select(p);
            }
          }
          i = 0;
          return this.map(function() {
            var key, obj, val;
            obj = Object.create(null);
            for (p in lists) {
              key = p.split('.').pop();
              val = lists[p][i];
              if (val !== void 0) {
                obj[key] = val;
              }
            }
            i++;
            return obj;
          });
        };
        return function() {
          switch (arguments.length) {
            case 0:
              return this;
            case 1:
              return selectOne.apply(this, arguments);
            default:
              return selectMany.apply(this, arguments);
          }
        };
      })(),
      or: function(x) {
        var i, i1, ref;
        for (i = i1 = 0, ref = this.length; (0 <= ref ? i1 < ref : i1 > ref); i = 0 <= ref ? ++i1 : --i1) {
          this[i] || (this[i] = x);
        }
        return this;
      },
      zap: function(p, v) {
        var head, i, k, tail;
        if ($.is('object', p)) {
          for (k in p) {
            v = p[k];
            this.zap(k, v);
          }
          return this;
        }
        i = p.lastIndexOf(".");
        if (i > 0) {
          head = p.substr(0, i);
          tail = p.substr(i + 1);
          this.select(head).zap(tail, v);
          return this;
        }
        switch ($.type(v)) {
          case "array":
          case "bling":
            this.each(function() {
              return this[p] = v[++i % v.length];
            });
            break;
          case "function":
            this.zap(p, this.select(p).map(v));
            break;
          default:
            this.each(function() {
              return this[p] = v;
            });
        }
        return this;
      },
      clean: function(...props) {
        return this.each(function() {
          var i1, j1, key, len1, len2, prop, ref;
          for (i1 = 0, len1 = props.length; i1 < len1; i1++) {
            prop = props[i1];
            switch ($.type(prop)) {
              case 'string':
              case 'number':
                delete this[prop];
                break;
              case 'regexp':
                ref = Object.keys(this);
                for (j1 = 0, len2 = ref.length; j1 < len2; j1++) {
                  key = ref[j1];
                  if (prop.test(key)) {
                    delete this[key];
                  }
                }
            }
          }
          return null;
        });
      },
      take: function(n = 1) {
        var end, i;
        end = Math.min(n, this.length);
        return $((function() {
          var i1, ref, results;
          results = [];
          for (i = i1 = 0, ref = end; i1 < ref; i = i1 += 1) {
            results.push(this[i]);
          }
          return results;
        }).call(this));
      },
      skip: function(n = 0) {
        var i, start;
        start = Math.max(0, n | 0);
        return $((function() {
          var i1, ref, ref1, results;
          results = [];
          for (i = i1 = ref = start, ref1 = this.length; i1 < ref1; i = i1 += 1) {
            results.push(this[i]);
          }
          return results;
        }).call(this));
      },
      first: function(n = 1) {
        if (n === 1) {
          return this[0];
        } else {
          return this.take(n);
        }
      },
      last: function(n = 1) {
        if (n === 1) {
          return this[this.length - 1];
        } else {
          return this.skip(this.length - n);
        }
      },
      slice: function(start = 0, end = this.length) {
        var i;
        start = index(start, this);
        end = index(end, this);
        return $((function() {
          var i1, ref, ref1, results;
          results = [];
          for (i = i1 = ref = start, ref1 = end; (ref <= ref1 ? i1 < ref1 : i1 > ref1); i = ref <= ref1 ? ++i1 : --i1) {
            results.push(this[i]);
          }
          return results;
        }).call(this));
      },
      extend: function(b) {
        var i, i1, len1;
        for (i1 = 0, len1 = b.length; i1 < len1; i1++) {
          i = b[i1];
          this.push(i);
        }
        return this;
      },
      push: function(b) {
        Array.prototype.push.call(this, b);
        return this;
      },
      unshift: function(b) {
        Array.prototype.unshift.call(this, b);
        return this;
      },
      filter: function(f, limit, positive) {
        var a, g, i1, it, len1, ref;
        if ($.is("bool", limit)) {
          [positive, limit] = [limit, positive];
        }
        if ($.is("number", positive)) {
          [limit, positive] = [positive, limit];
        }
        if (limit == null) {
          limit = this.length;
        }
        if (positive == null) {
          positive = true;
        }
        g = (function() {
          switch (false) {
            case !$.is("object", f):
              return function(x) {
                return $.matches(f, x);
              };
            case !$.is("string", f):
              return function(x) {
                var ref;
                return (ref = x != null ? typeof x.matchesSelector === "function" ? x.matchesSelector(f) : void 0 : void 0) != null ? ref : false;
              };
            case !$.is("regexp", f):
              return function(x) {
                return f.test(x);
              };
            case !$.is("function", f):
              return f;
            case !$.type.in("bool", "number", "null", "undefined", f):
              return function(x) {
                return f === x;
              };
            default:
              throw new Error(`unsupported argument to filter: ${$.type(f)}`);
          }
        })();
        a = $();
        ref = this;
        for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
          it = ref[i1];
          if ((!!g.call(it, it)) === positive) {
            if (--limit < 0) {
              break;
            }
            a.push(it);
          }
        }
        return a;
      },
      matches: function(expr) {
        switch (false) {
          case !$.is("string", expr):
            return this.select('matchesSelector').call(expr);
          case !$.is("regexp", expr):
            return this.map(function(x) {
              return expr.test(x);
            });
          default:
            throw new Error(`unsupported argument to matches: ${$.type(expr)}`);
        }
      },
      weave: function(b) {
        var c, i, i1, j1, ref, ref1;
        c = $();
        for (i = i1 = ref = this.length - 1; i1 >= 0; i = i1 += -1) {
          c[(i * 2) + 1] = this[i];
        }
        for (i = j1 = 0, ref1 = b.length; j1 < ref1; i = j1 += 1) {
          c[i * 2] = b[i];
        }
        return c;
      },
      fold: function(f) {
        var b, i, n;
        n = this.length;
        b = $((function() {
          var i1, ref, results;
          results = [];
          for (i = i1 = 0, ref = n - 1; i1 < ref; i = i1 += 2) {
            results.push(f.call(this, this[i], this[i + 1]));
          }
          return results;
        }).call(this));
        if ((n % 2) === 1) {
          b.push(f.call(this, this[n - 1], void 0));
        }
        return b;
      },
      flatten: function() {
        var b, i, i1, item, j, j1, len1, len2, ref;
        b = $();
        ref = this;
        for (i = i1 = 0, len1 = ref.length; i1 < len1; i = ++i1) {
          item = ref[i];
          if ($.type.in('array', 'bling', 'arguments', 'nodelist', item)) {
            for (j1 = 0, len2 = item.length; j1 < len2; j1++) {
              j = item[j1];
              b.push(j);
            }
          } else {
            b.push(item);
          }
        }
        return b;
      },
      call: function() {
        return this.apply(null, arguments);
      },
      apply: function(context, args) {
        return this.filterMap(function() {
          if ($.is("function", this)) {
            return this.apply(context, args);
          } else {
            return null;
          }
        });
      },
      log: function(label) {
        if (label) {
          $.log(label, this.toString(), this.length + " items");
        } else {
          $.log(this.toString(), this.length + " items");
        }
        return this;
      },
      toArray: function() {
        this.__proto__ = Array.prototype;
        return this;
      },
      clear: function() {
        return this.splice(0, this.length);
      },
      indexWhere: function(f) {
        var i, i1, len1, ref, x;
        ref = this;
        for (i = i1 = 0, len1 = ref.length; i1 < len1; i = ++i1) {
          x = ref[i];
          if (f.call(x, x)) {
            return i;
          }
        }
        return -1;
      }
    };
  });

  $.plugin({
    provides: "css,CSS",
    depends: "type"
  }, function() {
    var compact, flatten, parse, specialOps, stripComments, trim;
    flatten = function(o, prefix, into) {
      var k, nk, v;
      if (!(prefix in into)) {
        into[prefix] = [];
      }
      for (k in o) {
        v = o[k];
        switch (typeof v) {
          case "string":
          case "number":
            nk = k.replace(/([a-z]+)([A-Z]+)/g, "$1-$2").toLowerCase();
            into[prefix].push(`${nk}: ${v};`);
            break;
          case "object":
            nk = prefix ? prefix + k : k;
            flatten(v, nk, into);
            break;
          default:
            throw new Error(`unexpected type in css: ${typeof v}`);
        }
      }
      return into;
    };
    trim = function(str) {
      return str.replace(/^\s+/, '').replace(/\s+$/, '');
    };
    stripComments = function(str) {
      var i, j;
      while ((i = str.indexOf("/*")) > -1) {
        if ((j = str.indexOf("*/", i)) === -1) {
          break;
        }
        str = str.substring(0, i) + str.substring(j + 2);
      }
      return str;
    };
    parse = function(str, into) {
      var body, colon, i1, key, len1, m, rest, rule, selector, value;
      if (m = str.match(/([^{]+){/)) {
        selector = trim(m[1]);
        rest = str.substring(m[0].length);
        into[selector] || (into[selector] = {});
        if (m = rest.match(/([^}]+)}/)) {
          body = m[1].split(';');
          rest = rest.substring(m[0].length);
          for (i1 = 0, len1 = body.length; i1 < len1; i1++) {
            rule = body[i1];
            colon = rule.indexOf(':');
            if (!(key = rule.substring(0, colon))) {
              continue;
            }
            key = trim(key);
            value = trim(rule.substring(colon + 1));
            into[selector][key] = value;
          }
        }
        if (rest.length > 0) {
          return parse(rest, into);
        }
      }
      return into;
    };
    specialOps = '>+~';
    compact = function(obj) {
      var cur, first, i1, j1, len1, len2, op, part, parts, phaseTwo, ret, rules, selector;
      ret = {};
      for (selector in obj) {
        rules = obj[selector];
        for (i1 = 0, len1 = specialOps.length; i1 < len1; i1++) {
          op = specialOps[i1];
          selector = selector.replace(op, ` ${op} `);
        }
        parts = selector.split(/\s+/);
        switch (parts.length) {
          case 0:
            continue;
          case 1:
            $.extend((ret[selector] || (ret[selector] = {})), rules);
            break;
          default:
            cur = ret;
            first = true;
            for (j1 = 0, len2 = parts.length; j1 < len2; j1++) {
              part = parts[j1];
              if (!first) {
                part = " " + part;
              }
              cur = cur[part] || (cur[part] = {});
              first = false;
            }
            $.extend(cur, rules);
        }
      }
      phaseTwo = function(cur) {
        var key, modified, subkeys, val;
        modified = false;
        for (key in cur) {
          val = cur[key];
          if ($.is('object', val)) {
            subkeys = Object.keys(val);
            switch (subkeys.length) {
              case 0:
                delete cur[key];
                break;
              default:
                if (subkeys.length === 1 && $.is('object', val[subkeys[0]])) {
                  cur[key + subkeys[0]] = val[subkeys[0]];
                  delete cur[key];
                  phaseTwo(cur);
                }
            }
            phaseTwo(val);
          }
        }
        return cur;
      };
      return phaseTwo(ret);
    };
    return {
      $: {
        CSS: {
          parse: function(str, packed = false) {
            var ret;
            ret = parse(stripComments(str), {});
            if (packed) {
              return compact(ret);
            } else {
              return ret;
            }
          },
          stringify: function(obj) {
            var x, y;
            return ((function() {
              var ref, results;
              ref = flatten(obj, "", {});
              results = [];
              for (x in ref) {
                y = ref[x];
                if (y.length > 0) {
                  results.push(`${x} { ${y.join(' ')} }`);
                }
              }
              return results;
            })()).join(' ');
          }
        }
      }
    };
  });

  $.plugin({
    provides: 'date,midnight,stamp,unstamp,dateFormat,dateParse',
    depends: 'type'
  }, function() {
    var adder, d, fYY, floor, format_keys, formats, h, longDays, m, ms, pYY, pYYYY, parser_keys, parsers, s, shortDays, units;
    [ms, s, m, h, d] = [1, 1000, 1000 * 60, 1000 * 60 * 60, 1000 * 60 * 60 * 24];
    units = {
      ms,
      s,
      m,
      h,
      d,
      sec: s,
      second: s,
      seconds: s,
      min: m,
      minute: m,
      minutes: m,
      hr: h,
      hour: h,
      hours: h,
      day: d,
      days: d
    };
    shortDays = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"];
    longDays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
    formats = {
      yyyy: Date.prototype.getUTCFullYear,
      YY: fYY = function() {
        return String(this.getUTCFullYear()).substr(2);
      },
      yy: fYY,
      mm: function() {
        return this.getUTCMonth() + 1;
      },
      dd: Date.prototype.getUTCDate,
      dw: Date.prototype.getUTCDay,
      dW: function() {
        return shortDays[parseInt(this.getUTCDay(), 10) - 1];
      },
      DW: function() {
        return longDays[parseInt(this.getUTCDay(), 10) - 1];
      },
      HH: Date.prototype.getUTCHours,
      MM: Date.prototype.getUTCMinutes,
      SS: Date.prototype.getUTCSeconds,
      MS: Date.prototype.getUTCMilliseconds,
      _MS: function() {
        return $.padLeft(Date.prototype.getUTCMilliseconds.apply(this), 3, "0");
      }
    };
    format_keys = Object.keys(formats).sort().reverse();
    parsers = {
      YYYY: pYYYY = Date.prototype.setUTCFullYear,
      yyyy: pYYYY,
      YY: pYY = function(x) {
        return this.setUTCFullYear((x > 50 ? 1900 : 2000) + x);
      },
      yy: pYY,
      mm: function(x) {
        return this.setUTCMonth(x - 1);
      },
      dd: Date.prototype.setUTCDate,
      HH: Date.prototype.setUTCHours,
      MM: Date.prototype.setUTCMinutes,
      SS: Date.prototype.setUTCSeconds,
      _MS: function(s) {
        return this.setUTCMilliseconds(parseInt(s, 10));
      },
      MS: Date.prototype.setUTCMilliseconds
    };
    parser_keys = Object.keys(parsers).sort().reverse();
    floor = Math.floor;
    $.type.register("date", {
      is: function(o) {
        return $.isType(Date, o);
      },
      array: function(o) {
        return [o];
      },
      string: function(o, fmt, unit) {
        return $.date.format(o, fmt, unit);
      },
      number: function(o, unit) {
        return $.date.stamp(o, unit);
      }
    });
    $.type.extend('string', {
      date: function(s, fmt = $.date.defaultFormat) {
        return new Date($.date.parse(s, fmt, "ms"));
      }
    });
    $.type.extend('number', {
      date: function(n, unit = $.date.defaultUnit) {
        return $.date.unstamp(n, unit);
      }
    });
    adder = function(key) {
      return function(stamp, delta, stamp_unit = $.date.defaultUnit) {
        var date;
        date = $.date.unstamp(stamp, stamp_unit);
        parsers[key].call(date, (formats[key].call(date)) + delta);
        return $.date.stamp(date, stamp_unit);
      };
    };
    return {
      $: {
        date: {
          defaultUnit: "s",
          defaultFormat: "yyyy-mm-dd HH:MM:SS",
          stamp: function(date = new Date, unit = $.date.defaultUnit) {
            return floor(date / units[unit]);
          },
          unstamp: function(stamp, unit = $.date.defaultUnit) {
            return new Date(floor(stamp * units[unit]));
          },
          convert: function(stamp, from = $.date.defaultUnit, to = $.date.defaultUnit) {
            if ($.is("date", stamp)) {
              stamp = $.date.stamp(stamp, from);
            }
            return floor(stamp * units[from] / units[to]);
          },
          midnight: function(stamp, unit = $.date.defaultUnit) {
            return $.date.convert($.date.convert(stamp, unit, "d"), "d", unit);
          },
          format: function(stamp, fmt = $.date.defaultFormat, unit = $.date.defaultUnit) {
            var date, i1, k, len1;
            if ($.is("date", stamp)) {
              stamp = $.date.stamp(stamp, unit);
            }
            date = $.date.unstamp(stamp, unit);
            for (i1 = 0, len1 = format_keys.length; i1 < len1; i1++) {
              k = format_keys[i1];
              fmt = fmt.replace(k, $.padLeft("" + formats[k].call(date), k.length, "0"));
            }
            return fmt;
          },
          parse: function(dateString, fmt = $.date.defaultFormat, to = $.date.defaultUnit) {
            var date, err, i, i1, k, len1;
            date = new Date(0);
            i = 0;
            while (i < fmt.length) {
              for (i1 = 0, len1 = parser_keys.length; i1 < len1; i1++) {
                k = parser_keys[i1];
                if (fmt.indexOf(k, i) === i) {
                  try {
                    parsers[k].call(date, parseInt(dateString.slice(i, i + k.length), 10));
                  } catch (error1) {
                    err = error1;
                    throw new Error(`Invalid date ('${dateString}') given format mask: ${fmt} (failed at position ${i})`);
                  }
                  i += k.length - 1;
                  break;
                }
              }
              i += 1;
            }
            return $.date.stamp(date, to);
          },
          addMilliseconds: adder("MS"),
          addSeconds: adder("SS"),
          addMinutes: adder("MM"),
          addHours: adder("HH"),
          addDays: adder("dd"),
          addMonths: adder("mm"),
          addYears: adder("yyyy"),
          range: function(from, to, interval = 1, interval_unit = "dd", stamp_unit = $.date.defaultUnit) {
            var add, cur, ret;
            add = adder(interval_unit);
            ret = [from];
            while ((cur = ret[ret.length - 1]) < to) {
              ret.push(add(cur, interval, stamp_unit));
            }
            return ret;
          }
        }
      },
      midnight: function(unit = $.date.defaultUnit) {
        return this.map(function() {
          return $.date.midnight(this, unit);
        });
      },
      unstamp: function(unit = $.date.defaultUnit) {
        return this.map(function() {
          return $.date.unstamp(this, unit);
        });
      },
      stamp: function(unit = $.date.defaultUnit) {
        return this.map(function() {
          return $.date.stamp(this, unit);
        });
      },
      dateFormat: function(fmt = $.date.defaultFormat, unit = $.date.defaultUnit) {
        return this.map(function() {
          return $.date.format(this, fmt, unit);
        });
      },
      dateParse: function(fmt = $.date.defaultFormat, unit = $.date.defaultUnit) {
        return this.map(function() {
          return $.date.parse(this, fmt, unit);
        });
      }
    };
  });

  $.plugin({
    provides: "debug, debugStack",
    depends: "core"
  }, function() {
    var explodeStack, protoChain;
    explodeStack = function(stack, node_modules) {
      var err, files, fs, lines, lines_cache, message, nl;
      nl = /(?:\r\n|\r|\n)/;
      fs = null;
      try {
        fs = require('fs');
      } catch (error1) {
        err = error1;
        return stack;
      }
      lines = $(String(stack).split(nl)).filter(/^$/, false);
      if (!node_modules) {
        lines = lines.filter(/node_modules/, false);
      }
      message = lines.first();
      lines = lines.skip(1);
      lines_cache = Object.create(null);
      files = lines.map(function(s) {
        var before, col, f, f_lines, line, ln_num, spacer, tabs;
        if (s == null) {
          return null;
        }
        f = s.replace(/^\s*at\s+/g, '').replace(/.*\(([^:]+:\d+:\d+)\)$/, "$1");
        try {
          [f, ln_num, col] = f.split(/:/);
          f_lines = lines_cache[f] != null ? lines_cache[f] : lines_cache[f] = String(fs.readFileSync(f)).split(nl);
          if (f_lines == null) {
            return null;
          }
          before = "";
          if (ln_num > 1) {
            before = f_lines[ln_num - 2];
            if (before.length > 80) {
              before = "..8<.. " + before.substr(col - 25, 50) + " ..>8..";
            }
          }
          if (ln_num >= f_lines.length) {
            return null;
          }
          line = f_lines[ln_num - 1];
          if (line == null) {
            return null;
          }
          if (line.length > 80) {
            line = "..8<.." + line.substr(col - 25, 50) + "..>8..";
            col = 31;
          }
          tabs = line.replace(/[^\t]/g, '').length;
          spacer = $.repeat('\t', tabs) + $.repeat(' ', (col - 1) - tabs);
          return `  ${ln_num - 1} ${before}\n  ${ln_num} ${line}\n  ${ln_num} ${spacer}^`;
        } catch (error1) {
          err = error1;
          return null;
        }
      });
      return message + "\n" + $.weave(files, lines).filter(null, false).join("\n");
    };
    protoChain = function(obj, arr) {
      if (!(obj && obj.constructor)) {
        return arr;
      }
      return protoChain(obj.__proto__, arr.push(obj.constructor));
    };
    return {
      $: {
        debugStack: function(error, node_modules = false) {
          var stack;
          stack = (function() {
            switch (false) {
              case !$.is('error', error):
                return String(error.stack);
              case !$.is('string', error):
                return error;
              default:
                return String(error);
            }
          })();
          return explodeStack(stack, node_modules);
        },
        protoChain: function(o) {
          return protoChain(o.__proto__, $());
        }
      }
    };
  });

  $.plugin({
    provides: "delay,immediate,interval",
    depends: "is,select,extend,bound,core"
  }, function() {
    var u32;
    u32 = function(n) {
      return Math.min(Math.max(Math.abs(parseInt(n, 10)), 1), 4294967295);
    };
    return {
      $: {
        delay: (function() {
          var timeoutQueue;
          timeoutQueue = $.extend([], (function() {
            var next;
            next = function(a) {
              return function() {
                if (a.length) {
                  a.shift()();
                }
                return null;
              };
            };
            return {
              add: function(f, n) {
                var i, i1, ref;
                $.extend(f, {
                  order: n + $.now,
                  timeout: setTimeout(next(this), n)
                });
                for (i = i1 = 0, ref = this.length; i1 <= ref; i = i1 += 1) {
                  if (i === this.length || this[i].order > f.order) {
                    this.splice(i, 0, f);
                    break;
                  }
                }
                return this;
              },
              cancel: function(f) {
                var i;
                if ((i = this.indexOf(f)) > -1) {
                  this.splice(i, 1);
                  clearTimeout(f.timeout);
                }
                return this;
              }
            };
          })());
          return function(n, f) {
            var b, k, v;
            switch (false) {
              case !$.is('object', n):
                b = $((function() {
                  var results;
                  results = [];
                  for (k in n) {
                    v = n[k];
                    results.push($.delay(k, v));
                  }
                  return results;
                })());
                return {
                  cancel: function() {
                    return b.select('cancel').call();
                  },
                  unref: function() {
                    return b.select('unref').call();
                  },
                  ref: function() {
                    return b.select('ref').call();
                  }
                };
              case !$.is("function", f):
                timeoutQueue.add(f, u32(n));
                return {
                  cancel: function() {
                    return timeoutQueue.cancel(f);
                  },
                  unref: function(f) {
                    var ref;
                    return (ref = f.timeout) != null ? ref.unref() : void 0;
                  },
                  ref: function(f) {
                    var ref;
                    return (ref = f.timeout) != null ? ref.ref() : void 0;
                  }
                };
              default:
                throw new Error(`Bad arguments to $.delay (expected: int,function given: ${$.type(n)},${$.type(f)})`);
            }
          };
        })(),
        immediate: (function() {
          switch (false) {
            case !('setImmediate' in $.global):
              return $.global.setImmediate;
            case (typeof process !== "undefined" && process !== null ? process.nextTick : void 0) == null:
              return process.nextTick;
            default:
              return function(f) {
                return setTimeout(f, 0);
              };
          }
        })(),
        interval: function(n, f) {
          var g, paused, ret;
          paused = false;
          n = u32(n);
          ret = $.delay(n, g = function() {
            if (!paused) {
              f();
            }
            return $.delay(n, g);
          });
          return $.extend(ret, {
            pause: function(p = true) {
              return paused = p;
            },
            resume: function(p = true) {
              return paused = !p;
            }
          });
        }
      },
      delay: function(n, f) {
        $.delay(n, $.bound(this, f));
        return this;
      }
    };
  });

  $.plugin({
    depends: "inherit,reduce",
    provides: "diff,stringDistance,stringDiff"
  }, function() {
    var collapse, del, diff, diff_memo, ins, lev, lev_memo, min, sub;
    lev_memo = Object.create(null);
    min = Math.min;
    lev = function(s, i, n, t, j, m, dw, iw, sw) {
      return lev_memo[[s, i, n, t, j, m, dw, iw, sw]] != null ? lev_memo[[s, i, n, t, j, m, dw, iw, sw]] : lev_memo[[s, i, n, t, j, m, dw, iw, sw]] = lev_memo[[t, j, m, s, i, n, dw, iw, sw]] != null ? lev_memo[[t, j, m, s, i, n, dw, iw, sw]] : lev_memo[[t, j, m, s, i, n, dw, iw, sw]] = (function() {
        switch (false) {
          case !(m <= 0):
            return n;
          case !(n <= 0):
            return m;
          default:
            return min(dw + lev(s, i + 1, n - 1, t, j, m, dw, iw, sw), iw + lev(s, i, n, t, j + 1, m - 1, dw, iw, sw), (sw * (s[i] !== t[j])) + lev(s, i + 1, n - 1, t, j + 1, m - 1, dw, iw, sw));
        }
      })();
    };
    collapse = function(ops) {
      return $.inherit({
        toHTML: function() {
          return this.reduce((function(a, x) {
            return a += (function() {
              switch (x.op) {
                case 'ins':
                  return `<ins>${x.v}</ins>`;
                case 'del':
                  return `<del>${x.v}</del>`;
                case 'sub':
                  return `<del>${x.v}</del><ins>${x.w}</ins>`;
                case 'sav':
                  return x.v;
              }
            })();
          }), "");
        }
      }, ops.reduce((function(a, x) {
        var last;
        if (x.op === 'sub' && x.v === x.w) {
          x.op = 'sav';
          delete x.w;
        }
        if (!a.length) {
          a.push(x);
        } else {
          if ((last = a.last()).op === x.op) {
            last.v += x.v;
            if (last.op === 'sub') {
              last.w += x.w;
            }
          } else {
            a.push(x);
          }
        }
        return a;
      }), $()));
    };
    diff_memo = Object.create(null);
    del = function(c) {
      return {
        op: 'del',
        v: c
      };
    };
    ins = function(c) {
      return {
        op: 'ins',
        v: c
      };
    };
    sub = function(c, d) {
      return {
        op: 'sub',
        v: c,
        w: d
      };
    };
    diff = function(s, i, n, t, j, m, dw, iw, sw) {
      return diff_memo[[s, i, n, t, j, m, dw, iw, sw]] != null ? diff_memo[[s, i, n, t, j, m, dw, iw, sw]] : diff_memo[[s, i, n, t, j, m, dw, iw, sw]] = collapse((function() {
        var args, c, costs, i1, j1, len1, len2, ref, ref1, results, results1;
        switch (false) {
          case !(m <= 0):
            ref = s.substr(i, n);
            results = [];
            for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
              c = ref[i1];
              results.push(del(c));
            }
            return results;
            break;
          case !(n <= 0):
            ref1 = t.substr(j, m);
            results1 = [];
            for (j1 = 0, len2 = ref1.length; j1 < len2; j1++) {
              c = ref1[j1];
              results1.push(ins(c));
            }
            return results1;
            break;
          default:
            sw *= s[i] !== t[j];
            args = {
              del: [s + 0, i + 1, n - 1, t + 0, j + 0, m + 0, 1.00, 1.50, 1.50],
              ins: [s + 0, i + 0, n + 0, t + 0, j + 1, m - 1, 1.50, 1.00, 1.50],
              sub: [s + 0, i + 1, n - 1, t + 0, j + 1, m - 1, 1.00, 1.00, 1.00]
            };
            costs = {
              del: dw + lev(...args.del),
              ins: iw + lev(...args.ins),
              sub: sw + lev(...args.sub)
            };
            switch (min(costs.del, costs.ins, costs.sub)) {
              case costs.del:
                return $(del(s[i])).concat(diff(...args.del));
              case costs.ins:
                return $(ins(t[j])).concat(diff(...args.ins));
              case costs.sub:
                return $(sub(s[i], t[j])).concat(diff(...args.sub));
            }
        }
      })());
    };
    return {
      $: {
        stringDistance: function(s, t) {
          return lev(s, 0, s.length, t, 0, t.length, 1, 1, 1);
        },
        stringDiff: function(s, t) {
          return diff(s, 0, s.length, t, 0, t.length, 1, 1, 1.5);
        }
      }
    };
  });

  if ($.global.document != null) {
    $.plugin({
      provides: "dom,HTML,html,append,appendText,appendTo,prepend,prependTo," + "before,after,wrap,unwrap,replace,attr,data,addClass,removeClass,toggleClass," + "hasClass,text,val,css,defaultCss,rect,width,height,top,left,bottom,right," + "position,scrollToCenter,child,parents,next,prev,remove,find,querySelectorAll," + "clone,toFragment",
      depends: "function,type,string"
    }, function() {
      var after, bNodelistsAreSpecial, before, escaper, getOrSetRect, parser, selectChain, toFrag, toNode;
      bNodelistsAreSpecial = false;
      $.type.register("nodelist", {
        is: function(o) {
          return (o != null) && $.isType("NodeList", o);
        },
        hash: function(o) {
          var i;
          return $((function() {
            var i1, len1, results;
            results = [];
            for (i1 = 0, len1 = o.length; i1 < len1; i1++) {
              i = o[i1];
              results.push($.hash(i));
            }
            return results;
          })()).sum();
        },
        array: (function() {
          var err;
          try {
            document.querySelectorAll("xxx").__proto__ = {};
            return $.identity;
          } catch (error1) {
            err = error1;
            bNodelistsAreSpecial = true;
            return function(o) {
              var i1, len1, node, results;
              results = [];
              for (i1 = 0, len1 = o.length; i1 < len1; i1++) {
                node = o[i1];
                results.push(node);
              }
              return results;
            };
          }
        })(),
        string: function(o) {
          return "{Nodelist:[" + $(o).select('nodeName').join(",") + "]}";
        },
        node: function(o) {
          return $(o).toFragment();
        }
      });
      $.type.register("node", {
        is: function(o) {
          return (o != null ? o.nodeType : void 0) > 0;
        },
        hash: function(o) {
          return $.checksum(o.nodeName) + $.hash(o.attributes) + $.checksum(o.innerHTML);
        },
        string: function(o) {
          return o.toString();
        },
        node: $.identity
      });
      $.type.register("fragment", {
        is: function(o) {
          return (o != null ? o.nodeType : void 0) === 11;
        },
        hash: function(o) {
          var x;
          return $((function() {
            var i1, len1, ref, results;
            ref = o.childNodes;
            results = [];
            for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
              x = ref[i1];
              results.push($.hash(x));
            }
            return results;
          })()).sum();
        },
        string: function(o) {
          return o.toString();
        },
        node: $.identity
      });
      $.type.register("html", {
        is: function(o) {
          var s;
          return typeof o === "string" && (s = o.trimLeft())[0] === "<" && s[s.length - 1] === ">";
        },
        node: function(h) {
          var childNodes, df, i, i1, n, node, ref;
          (node = document.createElement('div')).innerHTML = h;
          if ((n = (childNodes = node.childNodes).length) === 1) {
            return node.removeChild(childNodes[0]);
          }
          df = document.createDocumentFragment();
          for (i = i1 = 0, ref = n; i1 < ref; i = i1 += 1) {
            df.appendChild(node.removeChild(childNodes[0]));
          }
          return df;
        },
        array: function(o) {
          var h;
          return $.type.lookup(h = $.HTML.parse(o)).array(h);
        },
        string: function(o) {
          return `'${o}'`;
        },
        repr: function(o) {
          return '"' + o + '"';
        }
      });
      $.type.extend({
        unknown: {
          node: function() {
            return null;
          }
        },
        bling: {
          node: function(o) {
            return o.toFragment();
          }
        },
        node: {
          html: function(n) {
            var d, ret;
            d = document.createElement("div");
            d.appendChild((n = n.cloneNode(true)));
            ret = d.innerHTML;
            d.removeChild(n);
            return ret;
          }
        },
        string: {
          node: function(o) {
            return $(o).toFragment();
          },
          array: (function() {
            if (bNodelistsAreSpecial) {
              return function(o) {
                var nl;
                return $.type.lookup(nl = document.querySelectorAll(o)).array(nl);
              };
            } else {
              return function(o) {
                return document.querySelectorAll(o);
              };
            }
          })()
        },
        function: {
          node: function(o) {
            return $(o.toString()).toFragment();
          }
        }
      });
      toFrag = function(a) {
        if (!a.parentNode) {
          document.createDocumentFragment().appendChild(a);
        }
        return a;
      };
      before = function(a, b) {
        return toFrag(a).parentNode.insertBefore(b, a);
      };
      after = function(a, b) {
        return toFrag(a).parentNode.insertBefore(b, a.nextSibling);
      };
      toNode = function(x) {
        return $.type.lookup(x).node(x);
      };
      escaper = false;
      parser = false;
      $.computeCSSProperty = function(k) {
        return function() {
          return $.global.getComputedStyle(this, null).getPropertyValue(k);
        };
      };
      getOrSetRect = function(p) {
        return function(x) {
          if (x != null) {
            return this.css(p, x);
          } else {
            return this.rect().select(p);
          }
        };
      };
      selectChain = function(prop) {
        return function() {
          return this.map(function(p) {
            return $((function() {
              var results;
              results = [];
              while (p = p[prop]) {
                results.push(p);
              }
              return results;
            })());
          });
        };
      };
      return {
        $: {
          HTML: {
            parse: function(h) {
              return $.type.lookup(h).node(h);
            },
            stringify: function(n) {
              return $.type.lookup(n).html(n);
            },
            escape: function(h) {
              var ret;
              escaper || (escaper = $("<div>&nbsp;</div>").child(0));
              ret = escaper.zap('data', h).select("parentNode.innerHTML").first();
              escaper.zap('data', '');
              return ret;
            }
          }
        },
        html: function(h) {
          switch ($.type(h)) {
            case "undefined":
            case "null":
              return this.select('innerHTML');
            case "string":
            case "html":
              return this.zap('innerHTML', h);
            case "bling":
              return this.html(h.toFragment());
            case "node":
              return this.each(function() {
                var results;
                this.replaceChild(this.childNodes[0], h);
                results = [];
                while (this.childNodes.length > 1) {
                  results.push(this.removeChild(this.childNodes[1]));
                }
                return results;
              });
          }
        },
        append: function(x) {
          x = toNode(x);
          if (x == null) {
            return;
          }
          return this.each(function(n) {
            return n != null ? typeof n.appendChild === "function" ? n.appendChild(x.cloneNode(true)) : void 0 : void 0;
          });
        },
        appendText: function(text) {
          var x;
          x = document.createTextNode(text);
          if (x == null) {
            return;
          }
          return this.each(function(n) {
            return n != null ? typeof n.appendChild === "function" ? n.appendChild(x.cloneNode(true)) : void 0 : void 0;
          });
        },
        appendTo: function(x) {
          var clones, i;
          clones = this.map(function() {
            return this.cloneNode(true);
          });
          i = 0;
          $(x).each(function() {
            return this.appendChild(clones[i++]);
          });
          return clones;
        },
        prepend: function(x) {
          if (x != null) {
            x = toNode(x);
            this.take(1).each(function() {
              switch (false) {
                case !(this.childNodes.length > 0):
                  return before(this.childNodes[0], x);
                default:
                  return this.appendChild(x);
              }
            });
            this.skip(1).each(function() {
              switch (false) {
                case !this.childNodes.length:
                  return before(this.childNodes[0], x.cloneNode(true));
                default:
                  return this.appendChild(x.cloneNode(true));
              }
            });
          }
          return this;
        },
        prependTo: function(x) {
          if (x != null) {
            $(x).prepend(this);
          }
          return this;
        },
        before: function(x) {
          if (x != null) {
            x = toNode(x);
            this.take(1).each(function() {
              return before(this, x);
            });
            this.skip(1).each(function() {
              return before(this, x.cloneNode(true));
            });
          }
          return this;
        },
        after: function(x) {
          if (x != null) {
            x = toNode(x);
            this.take(1).each(function() {
              return after(this, x);
            });
            this.skip(1).each(function() {
              return after(this, x.cloneNode(true));
            });
          }
          return this;
        },
        wrap: function(parent) {
          parent = toNode(parent);
          if ($.is("fragment", parent)) {
            throw new Error("cannot call .wrap() with a fragment as the parent");
          }
          return this.each(function(child) {
            var grandpa, marker;
            if (($.is("fragment", child)) || !child.parentNode) {
              return parent.appendChild(child);
            }
            grandpa = child.parentNode;
            marker = document.createElement("dummy");
            parent.appendChild(grandpa.replaceChild(marker, child));
            return grandpa.replaceChild(parent, marker);
          });
        },
        unwrap: function() {
          return this.each(function() {
            if (this.parentNode && this.parentNode.parentNode) {
              return this.parentNode.parentNode.replaceChild(this, this.parentNode);
            } else if (this.parentNode) {
              return this.parentNode.removeChild(this);
            }
          });
        },
        replace: function(n) {
          var clones, i, i1, r, ref, ref1;
          if ($.is('regexp', n)) {
            r = arguments[1];
            return this.map(function(s) {
              return s.replace(n, r);
            });
          }
          n = toNode(n);
          clones = this.map(function() {
            return n.cloneNode(true);
          });
          for (i = i1 = 0, ref = clones.length; i1 < ref; i = i1 += 1) {
            if ((ref1 = this[i].parentNode) != null) {
              ref1.replaceChild(clones[i], this[i]);
            }
          }
          return clones;
        },
        attr: function(a, v) {
          var k;
          if ($.is('object', a)) {
            for (k in a) {
              v = a[k];
              this.attr(k, v);
            }
          } else {
            switch (v) {
              case void 0:
                return this.select("getAttribute").call(a, v);
              case null:
                this.select("removeAttribute").call(a, v);
                break;
              default:
                this.select("setAttribute").call(a, v);
            }
          }
          return this;
        },
        data: function(k, v) {
          return this.attr(`data-${$.dashize(k)}`, v);
        },
        addClass: function(x) {
          var notempty;
          notempty = function(y) {
            return y !== "";
          };
          return this.removeClass(x).each(function() {
            var c;
            c = this.className.split(" ").filter(notempty);
            c.push(x);
            return this.className = c.join(" ");
          });
        },
        removeClass: function(x) {
          var notx;
          notx = function(y) {
            return y !== x;
          };
          return this.each(function() {
            this.className = this.className.split(" ").filter(notx).join(" ");
            if (this.className.length === 0) {
              return this.removeAttribute('class');
            }
          });
        },
        toggleClass: function(x) {
          var notx;
          notx = function(y) {
            return y !== x;
          };
          return this.each(function() {
            var cls, filter;
            cls = this.className.split(" ");
            filter = $.not($.isEmpty);
            if ((cls.indexOf(x)) > -1) {
              filter = $.and(notx, filter);
            } else {
              cls.push(x);
            }
            this.className = cls.filter(filter).join(" ");
            if (this.className.length === 0) {
              return this.removeAttribute('class');
            }
          });
        },
        hasClass: function(x) {
          return this.select('className.split').call(" ").select('indexOf').call(x).map(function(x) {
            return x > -1;
          });
        },
        text: function(t) {
          if (t != null) {
            return this.zap('textContent', t);
          }
          return this.select('textContent');
        },
        val: function(v) {
          if (v != null) {
            return this.zap('value', v);
          }
          return this.select('value');
        },
        css: function(key, v) {
          var i, i1, k, n, nn, ref, setters, values;
          if ((v != null) || $.is('object', key)) {
            setters = this.select('style.setProperty');
            if ($.is("object", key)) {
              for (k in key) {
                v = key[k];
                setters.call(k, v, "");
              }
            } else if ($.is("array", v)) {
              for (i = i1 = 0, ref = n = Math.max(v.length, nn = setters.length); i1 < ref; i = i1 += 1) {
                setters[i % nn](key, v[i % n], "");
              }
            } else if ($.is("function", v)) {
              values = this.select(`style.${key}`).weave(this.map($.computeCSSProperty(key))).fold($.coalesce).weave(setters).fold(function(setter, value) {
                return setter(key, v.call(value, value));
              });
            } else {
              setters.call(key, v, "");
            }
            return this;
          } else {
            return this.select(`style.${key}`).weave(this.map($.computeCSSProperty(key))).fold($.coalesce);
          }
        },
        defaultCss: function(k, v) {
          var i, sel, style;
          sel = this.selector;
          style = "";
          if ($.is("string", k)) {
            if ($.is("string", v)) {
              style += `${sel} { ${k}: ${v} } `;
            } else {
              throw Error("defaultCss requires a value with a string key");
            }
          } else if ($.is("object", k)) {
            for (i in k + "} ") {
              style += `${sel} { ` + `${i}: ${k[i]}; `;
            }
          }
          $("<style></style>").text(style).appendTo("head");
          return this;
        },
        rect: function() {
          return this.map(function(item) {
            switch (item) {
              case window:
                return {
                  width: window.innerWidth,
                  height: window.innerHeight,
                  top: 0,
                  left: 0,
                  right: window.innerWidth,
                  bottom: window.innerHeight
                };
              default:
                return item.getBoundingClientRect();
            }
          });
        },
        width: getOrSetRect("width"),
        height: getOrSetRect("height"),
        top: getOrSetRect("top"),
        left: getOrSetRect("left"),
        bottom: getOrSetRect("bottom"),
        right: getOrSetRect("right"),
        position: function(left, top) {
          switch (false) {
            case !(left == null):
              return this.rect();
            case !(top == null):
              return this.css("left", $.px(left));
            default:
              return this.css({
                top: $.px(top),
                left: $.px(left)
              });
          }
        },
        scrollToCenter: function() {
          document.body.scrollTop = this[0].offsetTop - ($.global.innerHeight / 2);
          return this;
        },
        child: function(n) {
          return this.select('childNodes').map(function() {
            return this[n < 0 ? n + this.length : n];
          });
        },
        parents: selectChain('parentNode'),
        prev: selectChain('previousSibling'),
        next: selectChain('nextSibling'),
        remove: function() {
          return this.each(function() {
            var ref;
            return (ref = this.parentNode) != null ? ref.removeChild(this) : void 0;
          });
        },
        find: function(css, limit = 0) {
          return this.filter("*").map((function() {
            switch (limit) {
              case 0:
                return function() {
                  return this.querySelectorAll(css);
                };
              case 1:
                return function() {
                  return $(this.querySelector(css));
                };
              default:
                return function() {
                  return $(this.querySelectorAll(css)).take(limit);
                };
            }
          })()).flatten();
        },
        querySelectorAll: function(expr) {
          return this.filter("*").reduce(function(a, i) {
            return a.extend(i.querySelectorAll(expr));
          }, $());
        },
        clone: function(deep = true, count = 1) {
          var c;
          c = function(n) {
            if ($.is("node", n)) {
              return n.cloneNode(deep);
            }
          };
          return this.map(function() {
            var _, i1, ref, results;
            switch (count) {
              case 1:
                return c(this);
              default:
                results = [];
                for (_ = i1 = 0, ref = count; i1 < ref; _ = i1 += 1) {
                  results.push(c(this));
                }
                return results;
            }
          });
        },
        toFragment: function() {
          var df;
          if (this.length > 1) {
            df = document.createDocumentFragment();
            (this.map(toNode)).map(function(node) {
              return df.appendChild(node);
            });
            return df;
          }
          return toNode(this[0]);
        }
      };
    });
  }

  $.plugin({
    provides: "EventEmitter",
    depends: "type,hook"
  }, function() {
    return {
      $: {
        EventEmitter: $.init.append(function(obj) {
          var add, list, listeners;
          if (obj === $.global || obj === null || obj === (void 0)) {
            if (this === $.global || this === $) {
              obj = {};
            } else {
              obj = this;
            }
          }
          listeners = Object.create(null);
          list = function(e) {
            return listeners[e] || (listeners[e] = []);
          };
          return $.inherit({
            emit: function(e, ...a) {
              var f;
              (function() {
                var i1, len1, ref, results;
                ref = list(e);
                results = [];
                for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
                  f = ref[i1];
                  results.push(f.apply(this, a));
                }
                return results;
              }).call(this);
              return this;
            },
            on: add = function(e, f) {
              var k, v;
              ('string' === typeof e) && list(e).push(f);
              for (k in e) {
                v = e[k];
                ('object' === typeof e) && this.addListener(k, v);
              }
              return this;
            },
            addListener: add,
            removeListener: function(e, f) {
              var i, l;
              if ((i = (l = list(e)).indexOf(f)) > -1) {
                return l.splice(i, 1);
              }
            },
            removeAllListeners: function(e) {
              return listeners[e] = [];
            },
            setMaxListeners: function() {},
            listeners: function(e) {
              return list(e).slice(0);
            }
          }, obj);
        })
      }
    };
  });

  $.plugin({
    depends: "dom,function,core",
    provides: "event,bind,unbind,trigger,delegate,undelegate,click,ready"
  }, function() {
    var EVENTSEP_RE, _b, _get, base1, binder, events, ret, triggerReady;
    EVENTSEP_RE = /,* +/;
    events = ['mousemove', 'mousedown', 'mouseup', 'mouseover', 'mouseout', 'blur', 'focus', 'load', 'unload', 'reset', 'submit', 'keyup', 'keydown', 'keypress', 'change', 'abort', 'cut', 'copy', 'paste', 'selection', 'drag', 'drop', 'orientationchange', 'touchstart', 'touchmove', 'touchend', 'touchcancel', 'gesturestart', 'gestureend', 'gesturecancel', 'hashchange'];
    binder = function(e) {
      return function(f) {
        if ($.is("function", f)) {
          return this.bind(e, f);
        } else {
          return this.trigger(e, f);
        }
      };
    };
    _get = function(self, ...keys) {
      var name1;
      if (keys.length === 0) {
        return self;
      } else {
        return _get((self[name1 = keys[0]] || (self[name1] = Object.create(null))), ...keys.slice(1));
      }
    };
    triggerReady = $.once(function() {
      var base1;
      $(document).trigger("ready").unbind("ready");
      if (typeof document.removeEventListener === "function") {
        document.removeEventListener("DOMContentLoaded", triggerReady, false);
      }
      return typeof (base1 = $.global).removeEventListener === "function" ? base1.removeEventListener("load", triggerReady, false) : void 0;
    });
    if (typeof document.addEventListener === "function") {
      document.addEventListener("DOMContentLoaded", triggerReady, false);
    }
    if (typeof (base1 = $.global).addEventListener === "function") {
      base1.addEventListener("load", triggerReady, false);
    }
    _b = function(funcName) {
      return function(e, f) {
        var c;
        c = (e || "").split(EVENTSEP_RE);
        return this.each(function() {
          var i, i1, len1, results;
          results = [];
          for (i1 = 0, len1 = c.length; i1 < len1; i1++) {
            i = c[i1];
            results.push(this[funcName](i, f, true));
          }
          return results;
        });
      };
    };
    ret = {
      bind: _b("addEventListener"),
      unbind: _b("removeEventListener"),
      trigger: function(evt, args = {}) {
        var e, evt_i, i1, len1, ref;
        args = $.extend({
          bubbles: true,
          cancelable: true
        }, args);
        ref = (evt || "").split(EVENTSEP_RE);
        for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
          evt_i = ref[i1];
          switch (evt_i) {
            case "click":
            case "mousemove":
            case "mousedown":
            case "mouseup":
            case "mouseover":
            case "mouseout":
              e = document.createEvent("MouseEvents");
              args = $.extend({
                detail: 1,
                screenX: 0,
                screenY: 0,
                clientX: 0,
                clientY: 0,
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                metaKey: false,
                button: 0,
                relatedTarget: null
              }, args);
              e.initMouseEvent(evt_i, args.bubbles, args.cancelable, $.global, args.detail, args.screenX, args.screenY, args.clientX, args.clientY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.button, args.relatedTarget);
              break;
            case "blur":
            case "focus":
            case "reset":
            case "submit":
            case "abort":
            case "change":
            case "load":
            case "unload":
              e = document.createEvent("UIEvents");
              e.initUIEvent(evt_i, args.bubbles, args.cancelable, $.global, 1);
              break;
            case "touchstart":
            case "touchmove":
            case "touchend":
            case "touchcancel":
              e = document.createEvent("TouchEvents");
              args = $.extend({
                detail: 1,
                screenX: 0,
                screenY: 0,
                clientX: 0,
                clientY: 0,
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                metaKey: false,
                touches: [],
                targetTouches: [],
                changedTouches: [],
                scale: 1.0,
                rotation: 0.0
              }, args);
              e.initTouchEvent(evt_i, args.bubbles, args.cancelable, $.global, args.detail, args.screenX, args.screenY, args.clientX, args.clientY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.touches, args.targetTouches, args.changedTouches, args.scale, args.rotation);
              break;
            case "gesturestart":
            case "gestureend":
            case "gesturecancel":
              e = document.createEvent("GestureEvents");
              args = $.extend({
                detail: 1,
                screenX: 0,
                screenY: 0,
                clientX: 0,
                clientY: 0,
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                metaKey: false,
                target: null,
                scale: 1.0,
                rotation: 0.0
              }, args);
              e.initGestureEvent(evt_i, args.bubbles, args.cancelable, $.global, args.detail, args.screenX, args.screenY, args.clientX, args.clientY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.target, args.scale, args.rotation);
              break;
            case "keydown":
            case "keypress":
            case "keyup":
              e = document.createEvent("KeyboardEvents");
              args = $.extend({
                view: null,
                ctrlKey: false,
                altKey: false,
                shiftKey: false,
                metaKey: false,
                keyCode: 0,
                charCode: 0
              }, args);
              e.initKeyboardEvent(evt_i, args.bubbles, args.cancelable, $.global, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.keyCode, args.charCode);
              break;
            default:
              e = document.createEvent("Events");
              e.initEvent(evt_i, args.bubbles, args.cancelable);
              e = $.extend(e, args);
          }
          if (!e) {
            continue;
          }
          this.each(function() {
            var err;
            try {
              return this.dispatchEvent(e);
            } catch (error1) {
              err = error1;
              return $.log("dispatchEvent error:", err);
            }
          });
        }
        return this;
      },
      delegate: function(selector, e, f) {
        var h, i1, len1, node, ref;
        h = function(evt) {
          var ref, t;
          if (t = (ref = $(evt.target).parents()[0]) != null ? ref.unshift(evt.target).filter(selector)[0] : void 0) {
            return f.call((evt.target = t), evt);
          }
        };
        ref = this.bind(e, h);
        for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
          node = ref[i1];
          _get(node, '__delegates__', selector, e)[f] = h;
        }
        return this;
      },
      undelegate: function(selector, e, f) {
        var h, i1, len1, node, ref, results;
        ref = this;
        results = [];
        for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
          node = ref[i1];
          h = _get(node, '__delegates__', selector, e);
          if (h && h[f]) {
            this.unbind(e, h[f]);
            results.push(delete h[f]);
          } else {
            results.push(void 0);
          }
        }
        return results;
      },
      click: function(f = {}) {
        var ref;
        if ((ref = this.css("cursor")) === "auto" || ref === "") {
          this.css("cursor", "pointer");
        }
        if ($.is("function", f)) {
          this.bind('click', f);
        } else {
          this.trigger('click', f);
        }
        return this;
      },
      ready: function(f) {
        if (triggerReady.exhausted) {
          return f.call(this);
        }
        return this.bind("ready", f);
      }
    };
    events.forEach(function(x) {
      return ret[x] = binder(x);
    });
    return ret;
  });

  $.plugin({
    provides: "function,identity,compose,once,cycle,bound,partial",
    depends: "extend,is,defineProperty,map"
  }, function() {
    return {
      $: {
        identity: function(o) {
          return o;
        },
        not: function(f) {
          return function() {
            return !f.apply(this, arguments);
          };
        },
        compose: function(f, g) {
          return function(x) {
            var y;
            return f.call(y, (y = g.call(x, x)));
          };
        },
        and: function(f, g) {
          return function(x) {
            return g.call(this, x) && f.call(this, x);
          };
        },
        once: function(f, n = 1) {
          return $.defineProperty((function() {
            if (n-- > 0) {
              return f.apply(this, arguments);
            }
          }), "exhausted", {
            get: function() {
              return n <= 0;
            }
          });
        },
        cycle: function(...f) {
          var i;
          i = -1;
          return function() {
            return f[i = ++i % f.length].apply(this, arguments);
          };
        },
        bound: function(t, f, args = []) {
          var r;
          if (f == null) {
            return $.identity;
          }
          if ($.is("function", f.bind)) {
            args.splice(0, 0, t);
            r = f.bind.apply(f, args);
          } else {
            r = function(...a) {
              return f.apply(t, (args.length ? args : a));
            };
          }
          return $.extend(r, {
            toString: function() {
              return `bound-method of ${t}.${f.name}`;
            }
          });
        },
        partial: function(f, ...a) {
          return function(...b) {
            return f(...a, ...b);
          };
        }
      },
      partial: function(...a) {
        return this.map(function(f) {
          return $.partial(f, ...a);
        });
      }
    };
  });

  $.plugin(function() {
    var select;
    Object.assign(((function*() {
      return (yield);
    })()).constructor.prototype, {
      toArray: function() {
        var a, ref, x;
        a = [];
        ref = this;
        for (x of ref) {
          a.push(x);
        }
        return a;
      },
      skip: function(n) {
        while (n-- > 0) {
          this.next();
        }
        return this;
      },
      limit: function*(n) {
        var next;
        while (n-- > 0) {
          if ((next = this.next()).done) {
            return;
          }
          yield next.value;
        }
        return null;
      },
      map: function*(f) {
        var ref, x;
        ref = this;
        for (x of ref) {
          yield f(x);
        }
        return null;
      },
      filter: function*(f, v = true) {
        var ref, x;
        ref = this;
        for (x of ref) {
          if (f(x) === v) {
            yield x;
          }
        }
        return null;
      },
      select: function*(key) {
        var ref, x;
        key = key.split('.');
        ref = this;
        for (x of ref) {
          yield select(x, key);
        }
        return null;
      }
    });
    select = function(o, k) {
      var i1, len1, x;
      for (i1 = 0, len1 = k.length; i1 < len1; i1++) {
        x = k[i1];
        o = o != null ? o[x] : void 0;
      }
      return o;
    };
    return {};
  });

  $.plugin({
    provides: "hash",
    depends: "type"
  }, function() {
    var array_hash, maxHash;
    maxHash = 0xFFFFFFFF;
    array_hash = function(d) {
      return function(o) {
        var x;
        return d + $((function() {
          var i1, len1, results;
          results = [];
          for (i1 = 0, len1 = o.length; i1 < len1; i1++) {
            x = o[i1];
            results.push($.hash(x));
          }
          return results;
        })()).reduce((function(a, x) {
          return ((a * a) + (x | 0)) % maxHash;
        }), 1);
      };
    };
    $.type.extend({
      unknown: {
        hash: function(o) {
          return $.checksum($.toString(o));
        }
      },
      object: {
        hash: function(o) {
          var k, v;
          return 1970931729 + $((function() {
            var results;
            results = [];
            for (k in o) {
              v = o[k];
              results.push($.hash(k) + $.hash(v));
            }
            return results;
          })()).sum();
        }
      },
      array: {
        hash: array_hash(1816922041)
      },
      arguments: {
        hash: array_hash(298517431)
      },
      bling: {
        hash: array_hash(92078573)
      },
      bool: {
        hash: function(o) {
          return parseInt(o ? 1 : void 0);
        }
      },
      regexp: {
        hash: function(o) {
          return 148243084 + $.checksum($.toString(o));
        }
      }
    });
    return {
      $: {
        hash: function(x) {
          return $.type.lookup(x).hash(x);
        }
      },
      hash: function() {
        return $.hash(this);
      }
    };
  });

  $.plugin(function() {
    return {
      $: {
        histogram: function(data, bucket_width = 1, output_width = 60) {
          var buckets, end, i, i1, j1, len, len1, m, max, mean, min, n, pct, pct_sum, ref, ret, sum, total, x;
          buckets = $();
          len = 0;
          min = 2e308;
          mean = 0;
          max = 0;
          total = 0;
          for (i1 = 0, len1 = data.length; i1 < len1; i1++) {
            x = data[i1];
            min = Math.min(x, min);
            max = Math.max(x, max);
            total += x;
            i = Math.floor(x / bucket_width);
            if (i in buckets) {
              buckets[i] += 1;
            } else {
              buckets[i] = 1;
            }
            len = Math.max(len, i + 1);
          }
          buckets.length = len;
          mean = total / data.length;
          m = buckets.max();
          buckets = buckets.or(0).scale(1 / m).scale(output_width);
          sum = buckets.sum();
          ret = "";
          pct_sum = 0;
          for (n = j1 = 0, ref = len; j1 < ref; n = j1 += 1) {
            end = (n + 1) * bucket_width;
            pct = buckets[n] * 100 / sum;
            pct_sum += pct;
            if (pct_sum > 0) {
              ret += $.padLeft(pct_sum.toFixed(2) + "%", 7) + $.padRight(` < ${end.toFixed(2)}`, 10) + ": " + $.repeat("#", buckets[n]) + "\n";
            }
          }
          return ret + `N: ${data.length} Min: ${min.toFixed(2)} Max: ${max.toFixed(2)} Mean: ${mean.toFixed(2)}`;
        }
      },
      histogram: function() {
        return $.histogram(this);
      }
    };
  });

  $.plugin({
    provides: "hook",
    depends: "type"
  }, function() {
    var hook;
    
    hook = function() {
      var chain;
      chain = [];
      return $.extend((function(args) {
        var func, i1, len1;
        for (i1 = 0, len1 = chain.length; i1 < len1; i1++) {
          func = chain[i1];
          args = func.call(this, args);
        }
        return args;
      }), {
        prepend: function(o) {
          chain.unshift(o);
          return o;
        },
        append: function(o) {
          chain.push(o);
          return o;
        }
      });
    };
    $.init = hook();
    return {
      $: {hook}
    };
  });

  $.plugin({
    depends: "dom",
    provides: "http"
  }, function() {
    var formencode;
    formencode = function(obj) {
      var i, o;
      if ($.is('object', obj)) {
        o = JSON.parse(JSON.stringify(obj));
        return ((function() {
          var results;
          results = [];
          for (i in o) {
            results.push(`${i}=${escape(o[i])}`);
          }
          return results;
        })()).join("&");
      } else {
        return obj;
      }
    };
    $.type.register("http", {
      is: function(o) {
        return $.isType('XMLHttpRequest', o);
      },
      array: function(o) {
        return [o];
      }
    });
    return {
      $: {
        http: function(url, opts = {}) {
          var _error, _success, k, ref, result, v, xhr;
          xhr = new XMLHttpRequest();
          result = $.Promise();
          if ($.is("function", opts)) {
            opts = {
              success: $.bound(xhr, opts)
            };
          }
          opts = $.extend({
            method: "GET",
            data: null,
            state: $.identity,
            success: $.identity,
            error: $.identity,
            async: true,
            asBlob: false,
            timeout: 0,
            followRedirects: false,
            withCredentials: false,
            headers: {}
          }, opts);
          opts.state = $.bound(xhr, opts.state);
          _success = $.bound(xhr, opts.success);
          _error = $.bound(xhr, opts.error);
          opts.success = function(text) {
            result.resolve(text);
            return _success(text);
          };
          opts.error = function(err) {
            result.reject(err);
            return _error(err);
          };
          if (opts.data && opts.method === "GET") {
            url += "?" + formencode(opts.data);
          } else if (opts.data && opts.method === "POST") {
            opts.data = formencode(opts.data);
          }
          xhr.open(opts.method, url, opts.async);
          xhr = $.extend(xhr, {
            asBlob: opts.asBlob,
            timeout: opts.timeout,
            followRedirects: opts.followRedirects,
            withCredentials: opts.withCredentials,
            onreadystatechange: function() {
              if (typeof opts.state === "function") {
                opts.state();
              }
              if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                  return opts.success(xhr.responseText);
                } else {
                  return opts.error(xhr.status, xhr.statusText);
                }
              }
            }
          });
          ref = opts.headers;
          for (k in ref) {
            v = ref[k];
            xhr.setRequestHeader(k, v);
          }
          try {
            xhr.addEventListener("progress", (evt) => {
              $.log("xhr progress event", evt.loaded, evt.total);
              return result.emit('progress', evt.loaded, evt.total);
            });
          } catch (error1) {}
          xhr.send(opts.data);
          return $.extend(result, {
            cancel: function() {
              return xhr.cancel();
            }
          });
        },
        post: function(url, opts = {}) {
          if ($.is("function", opts)) {
            opts = {
              success: opts
            };
          }
          opts.method = "POST";
          return $.http(url, opts);
        },
        get: function(url, opts = {}) {
          if ($.is("function", opts)) {
            opts = {
              success: opts
            };
          }
          opts.method = "GET";
          return $.http(url, opts);
        }
      }
    };
  });

  $.depends('hook', function() {
    return $.init.append(function(obj) {
      var keyMakers, map;
      map = new Map();
      keyMakers = [];
      return $.inherit({
        index: function(keyMaker) {
          var _map, i1, key, len1, ref, x;
          if (keyMakers.indexOf(keyMaker) === -1) {
            keyMakers.push(keyMaker);
            map.set(keyMaker, new Map());
          }
          ref = this;
          for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
            x = ref[i1];
            key = keyMaker(x);
            _map = map.get(keyMaker);
            if (!_map.has(key)) {
              _map.set(key, $());
            }
            _map.get(key).push(x);
          }
          return this;
        },
        query: function*(criteria) {
          var _map, i1, item, j1, key, keyMaker, len1, len2, ref;
          for (i1 = 0, len1 = keyMakers.length; i1 < len1; i1++) {
            keyMaker = keyMakers[i1];
            _map = map.get(keyMaker);
            if (_map.has(key = keyMaker(criteria))) {
              ref = _map.get(key);
              for (j1 = 0, len2 = ref.length; j1 < len2; j1++) {
                item = ref[j1];
                if (((yield item)) === false) {
                  return;
                }
              }
            }
          }
          return null;
        },
        queryOne: function(criteria) {
          return this.query(criteria).next().value;
        }
      }, obj);
    });
  });

  $.plugin({
    provides: "toHTML",
    depends: "type,synth,once"
  }, function() {
    var dumpScript, dumpStyles, table, tableRow;
    dumpStyles = $.once(function() {
      try {
        return $("head").append($.synth("style#dump").text("table.dump                { border: 1px solid black; }\ntable.dump tr.h           { background-color: blue; color: white; cursor: pointer; }\ntable.dump tr.h th        { padding: 0px 4px; }\ntable.dump tr.h.array     { background-color: purple; }\ntable.dump tr.h.bling     { background-color: gold; }\ntable.dump td             { padding: 2px; }\ntable.dump td.k           { background-color: lightblue; }\ntable.dump td.v.string    { background-color: #cfc; }\ntable.dump td.v.number    { background-color: #ffc; }\ntable.dump td.v.bool      { background-color: #fcf; }"));
      } catch (error1) {}
    });
    dumpScript = $.once(function() {
      try {
        return $("head").append($.synth("script#dump").text("$(document.body).delegate('table.dump tr.h', 'click', function() {\n	$(this.parentNode).find(\"tr.kv\").toggle()\n})"));
      } catch (error1) {}
    });
    table = function(t, rows) {
      var i1, len1, row, tab;
      tab = $.synth(`table.dump tr.h.${t} th[colspan=2] '${t}'`);
      if (t === "array" || t === "bling" || t === "nodelist") {
        tab.find("th").appendText(` [${rows.length}]`);
      }
      for (i1 = 0, len1 = rows.length; i1 < len1; i1++) {
        row = rows[i1];
        tab.append(row);
      }
      return tab[0];
    };
    tableRow = function(k, v, open) {
      var _t, row, td;
      row = $.synth(`tr.kv td.k[align=right][valign=top] '${k}' + td.v`);
      td = row.find("td.v");
      switch (_t = $.type(v = $.toHTML(v, open))) {
        case "string":
        case "number":
        case "bool":
        case "html":
        case "null":
        case "undefined":
          td.appendText(String(v));
          break;
        default:
          td.append(v);
      }
      td.addClass(_t);
      if (!open) {
        row.toggle();
      }
      return row;
    };
    return {
      $: {
        toHTML: function(obj, open = true) {
          var k, s, t, v;
          dumpStyles();
          dumpScript();
          switch (t = $.type(obj)) {
            case "string":
            case "number":
            case "bool":
            case "null":
            case "undefined":
            case "html":
              return obj;
            case "bling":
            case "array":
            case "nodelist":
              return table(t, (function() {
                var i1, len1, results;
                results = [];
                for (k = i1 = 0, len1 = obj.length; i1 < len1; k = ++i1) {
                  v = obj[k];
                  results.push(tableRow(k, v, open));
                }
                return results;
              })());
            case "object":
            case "array":
              return table(t, (function() {
                var results;
                results = [];
                for (k in obj) {
                  v = obj[k];
                  results.push(tableRow(k, v, open));
                }
                return results;
              })());
            case "node":
              s = $.HTML.stringify(obj);
              return s.substr(0, s.indexOf('>') + 1) + '...';
            default:
              return String(obj);
          }
        }
      }
    };
  });

  $.plugin({
    provides: 'keyName,keyNames',
    depends: "math"
  }, function() {
    var a, code, i1, j1, keyCode, keyName, len1, len2, name, ref, ref1;
    keyCode = {
      "Backspace": 8,
      "BS": 8,
      "Tab": 9,
      '\t': 9,
      "Enter": 13,
      '\n': 12,
      "Shift": 16,
      "Ctrl": 17,
      "Alt": 18,
      "Pause": 19,
      "Break": 19,
      "Caps": 20,
      "Caps Lock": 20,
      "Esc": 27,
      "Escape": 27,
      "Space": 32,
      " ": 32,
      "PgUp": 33,
      "Page Up": 33,
      "PgDn": 34,
      "End": 35,
      "Home": 36,
      "Left": 37,
      "Up": 38,
      "Right": 39,
      "Down": 40,
      "Insert": 45,
      "Del": 46,
      "Delete": 46,
      "Times": 106,
      "*": 106,
      "Plus": 107,
      "+": 107,
      "Minus": 109,
      "-": 109,
      "Div": 111,
      "Divide": 111,
      "/": 111,
      "Semi-Colon": 186,
      ";": 187,
      "Equal": 187,
      "=": 187,
      "Comma": 188,
      ",": 188,
      "Dash": 189,
      "-": 189,
      "Dot": 190,
      "Period": 190,
      ".": 190,
      "Forward Slash": 191,
      "/": 191,
      "Back Slash": 220,
      "\\": 220,
      "Single Quote": 222,
      "'": 222
    };
    ref = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
      a = ref[i1];
      keyCode[a] = keyCode[a.toLowerCase()] = a.charCodeAt(0);
    }
    ref1 = $.range(1, 13);
    for (j1 = 0, len2 = ref1.length; j1 < len2; j1++) {
      a = ref1[j1];
      keyCode["F" + a] = keyCode["f" + a] = 111 + a;
    }
    keyName = {};
    for (name in keyCode) {
      code = keyCode[name];
      keyName[code] || (keyName[code] = name);
    }
    return {
      $: {
        keyCode: function(name) {
          var ref2;
          return (ref2 = keyCode[name]) != null ? ref2 : name;
        },
        keyName: function(code) {
          var ref2;
          return (ref2 = keyName[code]) != null ? ref2 : code;
        }
      }
    };
  });

  $.plugin({
    depends: "dom,promise",
    provides: "lazy"
  }, function() {
    var lazy_load;
    lazy_load = function(elementName, props) {
      var elem, ret;
      ret = $.Promise();
      document.head.appendChild(elem = $.extend(document.createElement(elementName), props, {
        onload: function() {
          return ret.resolve(elem);
        },
        onerror: function() {
          return ret.reject.apply(ret, arguments);
        }
      }));
      return ret;
    };
    return {
      $: {
        script: function(src) {
          return lazy_load("script", {
            src: src
          });
        },
        style: function(src) {
          return lazy_load("link", {
            href: src,
            rel: "stylesheet"
          });
        }
      }
    };
  });

  $.plugin({
    provides: "log, logger",
    depends: "bound"
  }, function() {
    var _t, get_date_prefix, log, prior_date;
    _t = {
      _MS: "",
      SS: "",
      MM: "",
      HH: "",
      dd: "",
      mm: "",
      yyyy: ""
    };
    prior_date = 0;
    get_date_prefix = () => {
      var d, day, delta, hr, min, mon, ms, sec;
      d = new Date();
      delta = d - prior_date;
      prior_date = d;
      if ((_t._MS !== (ms = $.padLeft(d.getUTCMilliseconds(), 3, "0"))) || (delta % 1000) === 0) {
        _t._MS = ms;
        if (_t.SS !== (sec = $.padLeft(d.getUTCSeconds(), 2, "0" || (delta % 60000) === 0))) {
          _t.SS = sec;
          if (_t.MM !== (min = $.padLeft(d.getUTCMinutes(), 2, "0" || (delta % 3600000) === 0))) {
            _t.MM = min;
            if (_t.HH !== (hr = $.padLeft(String(d.getUTCHours()), 2, "0" || (delta % 86400000) === 0))) {
              _t.HH = hr;
              if (_t.dd !== (day = $.padLeft(String(d.getUTCDate()), 2, "0" || (delta > 86400000)))) {
                _t.dd = day;
                if (_t.mm !== (mon = $.padLeft(String(d.getUTCMonth() + 1), 2, "0"))) {
                  _t.mm = mon;
                  _t.yyyy = String(d.getUTCFullYear());
                }
              }
            }
          }
        }
      }
      return `${_t.yyyy}-${_t.mm}-${_t.dd} ${_t.HH}:${_t.MM}:${_t.SS}.${_t._MS}`;
    };
    log = function(...a) {
      var p;
      if (a.length) {
        if (p = typeof log.pre === "function" ? log.pre() : void 0) {
          a.unshift(p);
        }
        log.out(...a);
        return a[a.length - 1];
      }
    };
    log.out = console.log.bind(console);
    log.pre = null;
    log.enableTimestamps = function(level = 2) {
      return log.pre = [
        null,
        function() {
          return String(+new Date());
        },
        get_date_prefix
      ][level];
    };
    log.disableTimestamps = function() {
      return log.enableTimestamps(0);
    };
    return {
      $: {
        log: log,
        logger: function(prefix) {
          return function(...a) {
            a.unshift(prefix);
            return log(...a);
          };
        }
      }
    };
  });

  $.plugin({
    provides: "matches",
    depends: "function,core,string"
  }, function() {
    var ArrayMatch, Contains, ContainsValue, IsEqual, ObjMatch, RegExpMatch, behaviors, f, i1, j1, len1, len2, list, matches, obj_type, pt, specialPatterns, v;
    IsEqual = function(p, o, t) {
      return o === p;
    };
    Contains = function(p, a, t) {
      var i1, len1, v;
      for (i1 = 0, len1 = a.length; i1 < len1; i1++) {
        v = a[i1];
        if (matches(p, v, t)) {
          return true;
        }
      }
      return false;
    };
    ContainsValue = function(p, o, t) {
      var k, v;
      for (k in o) {
        v = o[k];
        if (matches(p, v, t)) {
          return true;
        }
      }
      return false;
    };
    ObjMatch = function(p, o, t) {
      var k, v;
      for (k in p) {
        v = p[k];
        if (!(matches(v, o[k]))) {
          return false;
        }
      }
      return true;
    };
    ArrayMatch = function(p, o, t) {
      var i, i1, len1, v;
      for (i = i1 = 0, len1 = p.length; i1 < len1; i = ++i1) {
        v = p[i];
        if (!(matches(v, o[i]))) {
          return false;
        }
      }
      return true;
    };
    RegExpMatch = function(p, s, t) {
      return p.test(String(s));
    };
    behaviors = {
      "function": [['array', 'bling', Contains], ['object', ContainsValue]],
      regexp: [['string', 'number', RegExpMatch], ['array', 'bling', Contains], ['object', ContainsValue]],
      object: [['array', 'bling', Contains], ['object', ObjMatch]],
      array: [['array', 'bling', ArrayMatch]],
      number: [['number', IsEqual], ['array', 'bling', Contains]],
      string: [['string', IsEqual], ['array', 'bling', Contains]]
    };
    for (pt in behaviors) {
      v = behaviors[pt];
      matches = {};
      for (i1 = 0, len1 = v.length; i1 < len1; i1++) {
        list = v[i1];
        f = list.pop();
        for (j1 = 0, len2 = list.length; j1 < len2; j1++) {
          obj_type = list[j1];
          matches[obj_type] = f;
        }
      }
      $.type.extend(pt, {matches});
    }
    specialPatterns = {
      $any: function() {
        return true;
      },
      $type: function(p, o, t) {
        return $.is(p.$type, o);
      },
      $class: function(p, o, t) {
        return $.isType(p.$class, o);
      },
      $lt: function(p, o, t) {
        return o < p.$lt;
      },
      $gt: function(p, o, t) {
        return o > p.$gt;
      },
      $lte: function(p, o, t) {
        return o <= p.$lte;
      },
      $gte: function(p, o, t) {
        return o >= p.$gte;
      },
      $ne: function(p, o, t) {
        return o !== p.$ne;
      }
    };
    matches = function(pattern, obj, pt = $.type.lookup(pattern)) {
      var k, ref, ref1, ref2, type;
      if (pt.name === 'object') {
        for (k in specialPatterns) {
          f = specialPatterns[k];
          if (k in pattern) {
            return f(pattern, obj, pt);
          }
        }
      }
      ref = pt.matches;
      for (type in ref) {
        f = ref[type];
        if (type === 'else') {
          continue;
        }
        if ($.is(type, obj)) {
          return f(pattern, obj, pt);
        }
      }
      return (ref1 = (ref2 = pt.matches) != null ? typeof ref2.else === "function" ? ref2.else(pattern, obj, pt) : void 0 : void 0) != null ? ref1 : IsEqual(pattern, obj, pt);
    };
    matches.Any = {
      $any: true
    };
    matches.Type = function(type) {
      return {
        $type: type
      };
    };
    matches.Class = function(klass) {
      return {
        $class: klass
      };
    };
    return {
      $: {
        matches: matches
      }
    };
  });

  $.plugin({
    provides: "math",
    depends: "core"
  }, function() {
    var _By, add, mean, sub;
    $.type.extend({
      bool: {
        number: function(o) {
          if (o) {
            return 1;
          } else {
            return 0;
          }
        }
      },
      number: {
        bool: function(o) {
          return !!o;
        }
      }
    });
    _By = function(cmp) {
      return function(field) {
        var valueOf, x;
        valueOf = (function() {
          switch (false) {
            case !$.is("string", field):
              return function(o) {
                return o[field];
              };
            case !$.is("function", field):
              return field;
            default:
              throw new Error(".maxBy first argument should be a string or function");
          }
        })();
        x = this.first();
        this.skip(1).each(function(n) {
          if (cmp(valueOf(n), valueOf(x))) {
            return x = n;
          }
        });
        return x;
      };
    };
    return {
      $: {
        range: function(start, end, step = 1) {
          var i;
          if (end == null) {
            (end = start, start = 0);
          }
          if (end < start && step > 0) {
            step *= -1;
          }
          return $((function() {
            var i1, ref, results;
            results = [];
            for (i = i1 = 0, ref = Math.ceil((end - start) / step); (0 <= ref ? i1 < ref : i1 > ref); i = 0 <= ref ? ++i1 : --i1) {
              results.push(start + (i * step));
            }
            return results;
          })());
        },
        zeros: function(n, z = 0) {
          var i;
          return $((function() {
            var i1, ref, results;
            results = [];
            for (i = i1 = 0, ref = n; (0 <= ref ? i1 < ref : i1 > ref); i = 0 <= ref ? ++i1 : --i1) {
              results.push(z);
            }
            return results;
          })());
        },
        ones: function(n) {
          var i;
          return $((function() {
            var i1, ref, results;
            results = [];
            for (i = i1 = 0, ref = n; (0 <= ref ? i1 < ref : i1 > ref); i = 0 <= ref ? ++i1 : --i1) {
              results.push(1);
            }
            return results;
          })());
        },
        deg2rad: function(n) {
          return n * Math.PI / 180;
        },
        rad2deg: function(n) {
          return n * 180 / Math.PI;
        }
      },
      floats: function() {
        return this.map(parseFloat);
      },
      ints: function() {
        return this.map(function() {
          return parseInt(this, 10);
        });
      },
      px: function(delta) {
        return this.ints().map(function() {
          return $.px(this, delta);
        });
      },
      min: function() {
        return this.filter(isFinite).reduce(Math.min);
      },
      max: function() {
        return this.filter(isFinite).reduce(Math.max);
      },
      maxBy: _By(function(a, b) {
        return a > b;
      }),
      minBy: _By(function(a, b) {
        return a < b;
      }),
      mean: mean = function() {
        if (!this.length) {
          return 0;
        } else {
          return this.sum() / this.length;
        }
      },
      avg: mean,
      sum: function() {
        var i1, len1, n, ref, x;
        n = 0;
        ref = this;
        for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
          x = ref[i1];
          if ((x != null) && isFinite(x)) {
            n += x;
          }
        }
        return n;
      },
      product: function() {
        return this.filter(isFinite).reduce(function(a) {
          return a * this;
        });
      },
      squares: function() {
        return this.pow(2);
      },
      pow: function(n) {
        return this.map(function() {
          return Math.pow(this, n);
        });
      },
      magnitude: function() {
        return Math.sqrt(this.floats().squares().sum());
      },
      scale: function(r) {
        return this.map(function() {
          return r * this;
        });
      },
      add: add = function(d) {
        var i;
        switch ($.type(d)) {
          case "number":
            return this.map(function() {
              return d + this;
            });
          case "bling":
          case "array":
            return $((function() {
              var i1, ref, results;
              results = [];
              for (i = i1 = 0, ref = Math.min(this.length, d.length); (0 <= ref ? i1 < ref : i1 > ref); i = 0 <= ref ? ++i1 : --i1) {
                results.push(this[i] + d[i]);
              }
              return results;
            }).call(this));
        }
      },
      plus: add,
      sub: sub = function(d) {
        var i;
        switch ($.type(d)) {
          case "number":
            return this.map(function() {
              return this - d;
            });
          case "bling":
          case "array":
            return $((function() {
              var i1, ref, results;
              results = [];
              for (i = i1 = 0, ref = Math.min(this.length, d.length); (0 <= ref ? i1 < ref : i1 > ref); i = 0 <= ref ? ++i1 : --i1) {
                results.push(this[i] - d[i]);
              }
              return results;
            }).call(this));
        }
      },
      minus: sub,
      dot: function(b) {
        var i;
        return $.sum((function() {
          var i1, ref, results;
          results = [];
          for (i = i1 = 0, ref = Math.min(this.length, b.length); (0 <= ref ? i1 < ref : i1 > ref); i = 0 <= ref ? ++i1 : --i1) {
            results.push(this[i] * b[i]);
          }
          return results;
        }).call(this));
      },
      angle: function(b) {
        return Math.acos(this.dot(b) / (this.magnitude() * b.magnitude()));
      },
      cross: function(b) {
        return $(this[1] * b[2] - this[2] * b[1], this[2] * b[0] - this[0] * b[2], this[0] * b[1] - this[1] * b[0]);
      },
      normalize: function() {
        return this.scale(1 / this.magnitude());
      },
      deg2rad: function() {
        return this.filter(isFinite).map(function() {
          return this * Math.PI / 180;
        });
      },
      rad2deg: function() {
        return this.filter(isFinite).map(function() {
          return this * 180 / Math.PI;
        });
      }
    };
  });

  
  $.plugin({
    depends: "function,hash",
    provides: 'memoize'
  }, function() {
    var plainCache;
    plainCache = function() {
      var data;
      data = {};
      return {
        has: function(k) {
          return k in data;
        },
        get: function(k) {
          return data[k];
        },
        set: function(k, v) {
          return data[k] = v;
        }
      };
    };
    return {
      $: {
        memoize: function(opts) {
          if ($.is("function", opts)) {
            opts = {
              f: opts
            };
          }
          if (!$.is('object', opts)) {
            throw new Error("Argument Error: memoize requires either a function or object as first argument");
          }
          opts.cache || (opts.cache = plainCache());
          opts.hash || (opts.hash = $.hash);
          return function() {
            var key;
            key = opts.hash(arguments);
            if (opts.cache.has(key)) {
              return opts.cache.get(key);
            } else {
              return opts.cache.set(key, opts.f.apply(this, arguments));
            }
          };
        }
      }
    };
  });

  $.plugin({
    provides: 'middleware',
    depends: 'type'
  }, function() {
    return {
      $: {
        middleware: function(s = []) {
          var e;
          e = $();
          return {
            catch: function(f) {
              e.push(f);
              return this;
            },
            use: function(f) {
              s.push(f);
              return this;
            },
            unuse: function(f) {
              var i;
              while ((i = s.indexOf(f)) > -1) {
                s.splice(i, 1);
              }
              return this;
            },
            invoke: function(...a) {
              var i, next;
              i = -1;
              (next = (() => {
                var _e;
                try {
                  return s[++i](...a, next);
                } catch (error1) {
                  _e = error1;
                  return e.call(_e);
                }
              }))();
              return this;
            }
          };
        }
      }
    };
  });

  $.plugin({
    depends: "core,function",
    provides: "promise"
  }, function() {
    var NoValue, Progress, Promise;
    NoValue = class NoValue {};
    Promise = function(obj) {
      var consume_all, consume_one, end, err, getState, isFailed, isFinished, result, ret, waiting;
      if (obj === $.global || obj === null || obj === (void 0)) {
        if (this === $) {
          obj = {};
        } else {
          obj = this;
        }
      }
      waiting = [];
      err = result = NoValue;
      consume_all = function(e, v) {
        var w;
        while (w = waiting.shift()) {
          consume_one(w, e, v);
        }
        return null;
      };
      consume_one = function(cb, e, v) {
        var __e, __stack, _e, _stack, ref;
        if ((ref = cb.timeout) != null) {
          ref.cancel();
        }
        try {
          cb(e, v);
        } catch (error1) {
          _e = error1;
          _stack = $.debugStack(_e);
          $.log(`Promise(${ret.promiseId}) first-chance exception:`, _stack);
          try {
            cb(_e, null);
          } catch (error1) {
            __e = error1;
            __stack = $.debugStack(__e);
            $.log(`Promise(${ret.promiseId}) last-chance exception:`, __stack);
          }
        }
        return null;
      };
      end = (error, value) => {
        if ((err === result && result === NoValue)) {
          if (error !== NoValue) {
            err = error;
            if (!(error != null ? error.stack : void 0)) {
              err = new Error(error);
            }
          } else if (value !== NoValue) {
            result = value;
          }
          switch (true) {
            case value === this:
              return end(new TypeError("cant resolve a promise with itself"));
            case (value != null) && value.then && value.catch:
              value.then(function(x) {
                return end(null, x);
              });
              value.catch(function(e) {
                return end(e, null);
              });
              break;
            case $.is('promise', value):
              value.wait(end);
              break;
            case error !== NoValue:
              consume_all(err, null);
              break;
            case value !== NoValue:
              consume_all(null, result);
          }
        }
        return this;
      };
      ret = $.inherit({
        promiseId: $.random.string(6),
        wait: function(timeout, cb) {
          if ($.is("function", timeout)) {
            [cb, timeout] = [timeout, 2e308];
          }
          if (err !== NoValue) {
            consume_one(cb, err, null);
          } else if (result !== NoValue) {
            consume_one(cb, null, result);
          } else {
            waiting.push(cb);
            if (isFinite(parseFloat(timeout))) {
              cb.timeout = $.delay(timeout, () => {
                var i;
                if ((i = waiting.indexOf(cb)) > -1) {
                  waiting.splice(i, 1);
                  return consume_one(cb, (err = new Error('timeout')), void 0);
                }
              });
            }
          }
          return this;
        },
        then: function(f, e) {
          return this.wait(function(err, x) {
            if (err) {
              return typeof e === "function" ? e(err) : void 0;
            } else {
              return f(x);
            }
          });
        },
        finish: function(value) {
          end(NoValue, value);
          return this;
        },
        resolve: function(value) {
          end(NoValue, value);
          return this;
        },
        fail: function(error) {
          end(error, NoValue);
          return this;
        },
        reject: function(error) {
          end(error, NoValue);
          return this;
        },
        reset: function() {
          err = result = NoValue;
          return this;
        },
        handler: function(err, data) {
          if (err) {
            return ret.reject(err);
          } else {
            return ret.resolve(data);
          }
        },
        inspect: function() {
          return `{Promise[${this.promiseId}] ${getState()}}`;
        },
        toString: function() {
          return `{Promise[${this.promiseId}] ${getState()}}`;
        }
      }, $.EventEmitter(obj));
      getState = function() {
        switch (false) {
          case result === NoValue:
            return "resolved";
          case err === NoValue:
            return "rejected";
          default:
            return "pending";
        }
      };
      isFinished = function() {
        return result !== NoValue;
      };
      $.defineProperty(ret, 'finished', {
        get: isFinished
      });
      $.defineProperty(ret, 'resolved', {
        get: isFinished
      });
      isFailed = function() {
        return err !== NoValue;
      };
      $.defineProperty(ret, 'failed', {
        get: isFailed
      });
      $.defineProperty(ret, 'rejected', {
        get: isFailed
      });
      return ret;
    };
    Promise.compose = Promise.parallel = function(...promises) {
      var p;
      promises = $(promises).flatten();
      p = $.Progress(1 + promises.length);
      $(promises).select('wait').call(function(err) {
        if (err) {
          return p.reject(err);
        } else {
          return p.resolve(1);
        }
      });
      return p.resolve(1);
    };
    Promise.collect = function(promises) {
      var i, i1, len1, p, promise, q, ret;
      ret = [];
      p = $.Promise();
      if (promises == null) {
        return p.resolve(ret);
      }
      q = $.Progress(1 + promises.length);
      for (i = i1 = 0, len1 = promises.length; i1 < len1; i = ++i1) {
        promise = promises[i];
        (function(i) {
          return promise.wait(function(err, result) {
            if (err) {
              return q.reject(err);
            } else {
              return q.resolve(1, ret[i] = result);
            }
          });
        })(i);
      }
      q.then((function() {
        return p.resolve(ret);
      }), p.reject);
      q.resolve(1);
      return p;
    };
    Promise.wrapCall = function(f, ...args) {
      var p;
      p = $.Promise();
      f(...args, function(e, r) {
        if (e) {
          return p.reject(e);
        } else {
          return p.resolve(r);
        }
      });
      return p;
    };
    Progress = function(max = 1.0) {
      var cur, ret;
      cur = 0.0;
      return ret = $.inherit({
        progress: function(...args) {
          var item, ref, ref1;
          if (!args.length) {
            return cur;
          }
          cur = (ref = args[0]) != null ? ref : cur;
          if (args.length > 1) {
            max = (ref1 = args[1]) != null ? ref1 : max;
          }
          item = args.length > 2 ? args[2] : cur;
          if (cur >= max) {
            ret.__proto__.__proto__.resolve(item);
          }
          ret.emit('progress', cur, max, item);
          return this;
        },
        resolve: function(delta, item = delta) {
          if (!isFinite(delta)) {
            delta = 1;
          }
          return ret.progress(cur + delta, max, item);
        },
        finish: function(delta, item) {
          return ret.resolve(delta, item);
        },
        include: function(promise) {
          if ($.is('promise', promise)) {
            ret.progress(cur, max + 1);
            promise.wait(function(err, data) {
              if (err) {
                return ret.reject(err);
              } else {
                return ret.resolve(data);
              }
            });
          }
          return this;
        },
        inspect: function() {
          return `{Progress[${ret.promiseId}] ${cur}/${max}}`;
        }
      }, Promise());
    };
    Promise.xhr = function(xhr) {
      var p;
      p = $.Promise();
      xhr.onreadystatechange = function() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            return p.resolve(xhr.responseText);
          } else {
            return p.resolve(`${this.status} ${this.statusText}`);
          }
        }
      };
      return p;
    };
    Promise.series = function(...series) {
      var p, run;
      series = $(series).flatten();
      run = function(i) {
        return function() {
          if (i >= series.length) {
            return;
          }
          return series[i] = series[i]().wait(function(err, result) {
            p.resolve(series[i] = [err, result]);
            return $.immediate(run(i + 1));
          });
        };
      };
      p = $.Progress(series.length);
      $.immediate(run(0));
      return p;
    };
    $.depends('dom', function() {
      return Promise.image = function(src) {
        var image, p;
        p = $.Promise();
        $.extend(image = new Image(), {
          onerror: function(e) {
            return p.reject(e);
          },
          onload: function() {
            return p.resolve(image);
          },
          src: src
        });
        return p;
      };
    });
    $.depends('type', function() {
      return $.type.register('promise', {
        is: function(o) {
          return (o != null) && ('object' === typeof o) && 'then' in o && 'function' === typeof o.then && o.then.length === 2;
        }
      });
    });
    return {
      $: {Promise, Progress}
    };
  });

  $.plugin({
    provides: 'prompt,confirm',
    depends: 'synth,keyName'
  }, function() {
    var _confirm, _prompt, _prompt_css;
    _prompt_css = function() {
      if (!$("head .prompt").length) {
        return $("head").append("<style class='prompt'>" + $.CSS.stringify({
          ".prompt": {
            position: "absolute",
            top: 0,
            left: 0,
            width: "100%",
            height: "100%",
            zIndex: "999999",
            background: "rgba(0,0,0,.4)",
            fontSize: "12px",
            " input": {
              padding: "2px",
              margin: "0px 0px 4px -4px",
              width: "100%"
            },
            " button": {
              fontSize: "13px",
              ".done": {
                fontSize: "14px"
              }
            },
            " > center": {
              width: "200px",
              height: "44px",
              margin: "20px auto",
              padding: "16px",
              background: "#ffc",
              borderRadius: "5px"
            }
          }
        }) + "</style>");
      }
    };
    _prompt = function(label, type, cb) {
      var cancelButton, dialog, done, doneButton, input;
      _prompt_css();
      dialog = $.synth(`div.prompt center\n	input[type=${type}][placeholder=${label}] + br +\n	button.cancel 'Cancel' +\n	button.done 'Done'`).appendTo("body").first();
      input = dialog.querySelector("input");
      input.onkeydown = function(evt) {
        switch ($.keyName(evt.keyCode)) {
          case "Enter":
            return done(input.value);
          case "Esc":
            return done(null);
        }
      };
      doneButton = dialog.querySelector("button.done");
      cancelButton = dialog.querySelector("button.cancel");
      done = function(value) {
        delete doneButton.onclick;
        delete cancelButton.onclick;
        dialog.parentNode.removeChild(dialog);
        return cb(value);
      };
      doneButton.onclick = function() {
        return done(input.value);
      };
      cancelButton.onclick = function() {
        return done(null);
      };
      return null;
    };
    _confirm = function(...args) {
      var buttons, cb, center, dialog, i1, label, len1, value;
      cb = args.pop();
      label = args.shift();
      if (args.length > 0) {
        buttons = args;
      } else {
        buttons = {
          Yes: true,
          No: false
        };
      }
      _prompt_css();
      dialog = $.synth(`div.prompt center\n	span '${label}' + br`).appendTo("body");
      center = dialog.find('center');
      switch ($.type(buttons)) {
        case 'array':
        case 'bling':
          for (i1 = 0, len1 = buttons.length; i1 < len1; i1++) {
            label = buttons[i1];
            $.synth(`button[value=${label}] '${label}'`).appendTo(center);
          }
          break;
        case 'object':
          for (label in buttons) {
            value = buttons[label];
            $.synth(`button[value=${value}] '${label}'`).appendTo(center);
          }
      }
      dialog.find("button").bind("click", function(evt) {
        dialog.remove();
        return cb(evt.target.getAttribute('value'));
      });
      return null;
    };
    return {
      $: {
        prompt: _prompt,
        confirm: _confirm
      }
    };
  });

  $.plugin({
    depends: "core",
    provides: "pubsub"
  }, function() {
    var Hub, name, prop, ref, ret, rootHub;
    Hub = class Hub {
      constructor() {
        this.listeners = {};
      }

      publish(channel, ...args) {
        var base1, caught, err, i1, len1, listener, ref;
        caught = null;
        ref = (base1 = this.listeners)[channel] || (base1[channel] = []);
        for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
          listener = ref[i1];
          if (this.filter(listener, ...args)) {
            try {
              listener(...args);
            } catch (error1) {
              err = error1;
              if (caught == null) {
                caught = err;
              }
            }
          }
        }
        if (caught) {
          throw caught;
        }
        switch (args.length) {
          case 0:
            return null;
          case 1:
            return args[0];
          default:
            return args;
        }
      }

      filter(listener, message) {
        if ('patternObject' in listener) {
          return $.matches(listener.patternObject, message);
        }
        return true;
      }

      publisher(channel, func) {
        var t;
        t = this;
        return function() {
          return t.publish(channel, func.apply(this, arguments));
        };
      }

      subscribe(channel, ...args) {
        var base1, func;
        func = args.pop();
        if (args.length > 0) {
          func.patternObject = args.pop();
        }
        ((base1 = this.listeners)[channel] || (base1[channel] = [])).push(func);
        return func;
      }

      unsubscribe(channel, func) {
        var a, base1, i;
        if (func == null) {
          this.listeners[channel] = [];
        } else {
          a = ((base1 = this.listeners)[channel] || (base1[channel] = []));
          if ((i = a.indexOf(func)) > -1) {
            a.splice(i, 1);
          }
        }
        return func;
      }

    };
    ret = {
      $: {Hub}
    };
    rootHub = new Hub();
    ref = Object.getOwnPropertyDescriptors(Hub.prototype);
    for (name in ref) {
      prop = ref[name];
      if (name === 'constructor') {
        continue;
      }
      if ("function" === typeof prop.value) {
        ret.$[name] = prop.value.bind(rootHub);
      }
    }
    return ret;
  });

  $.plugin({
    provides: 'random',
    depends: 'type'
  }, function() {
    var abs, die, element, englishAlphabet, floor, integer, log, max_int, next, random, real, s, string, uuidAlphabet;
    englishAlphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
    uuidAlphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    ({floor, abs, log} = Math);
    max_int = 0xFFFFFFFF;
    s = new Uint32Array(2);
    next = function() {
      var result, s0, s1;
      s0 = s[0];
      s1 = s[1];
      result = (s0 + s1) % max_int;
      s1 ^= s0;
      s[0] = (s0 << 27) | (s0 >>> 5) ^ s1 ^ (s1 << 7);
      s[1] = (s1 << 18) | (s1 >>> 14);
      return result;
    };
    random = function() {
      return next() / max_int;
    };
    $.defineProperty(random, 'seed', {
      set: function(n) {
        s[0] = n;
        s[1] = 1;
        next();
        next();
        next();
        return n;
      }
    });
    random.seed = +new Date();
    return {
      $: {
        random: $.extend(random, {
          real: real = function(min, max) {
            if (min == null) {
              [min, max] = [0, 1.0];
            }
            if (max == null) {
              [min, max] = [0, min];
            }
            return (random() * (max - min)) + min;
          },
          integer: integer = function(min, max) {
            return floor(real(min, max));
          },
          string: string = function(len, prefix = "", alphabet = englishAlphabet) {
            while (prefix.length < len) {
              prefix += element(alphabet);
            }
            return prefix;
          },
          coin: function(balance = .5) {
            return random() <= balance;
          },
          element: element = function(arr, weights) {
            var i, i1, item, len1, r, sorted, sum, w;
            if (weights != null) {
              w = $(weights);
              w = w.scale(1.0 / w.sum());
              i = 0;
              sorted = $(arr).map(function(x) {
                return {
                  v: x,
                  w: w[i++]
                };
              }).sortBy(function(x) {
                return -x.w;
              });
              r = random();
              sum = 0;
              for (i1 = 0, len1 = sorted.length; i1 < len1; i1++) {
                item = sorted[i1];
                if ((sum += item.w) >= r) {
                  return item.v;
                }
              }
            }
            return arr[integer(0, arr.length)];
          },
          gaussian: function(mean = 0.5, ssig = 0.12) {
            var q, u, v, x, y;
            while (true) {
              u = random();
              v = 1.7156 * (random() - 0.5);
              x = u - 0.449871;
              y = abs(v) + 0.386595;
              q = (x * x) + y * (0.19600 * y - 0.25472 * x);
              if (!(q > 0.27597 && (q > 0.27846 || (v * v) > (-4 * log(u) * u * u)))) {
                break;
              }
            }
            return mean + ssig * v / u;
          },
          die: die = function(faces) {
            return integer(1, faces + 1);
          },
          dice: function(n, faces) {
            return $((function() {
              var i1, ref, results;
              results = [];
              for (i1 = 0, ref = n; i1 < ref; i1 += 1) {
                results.push(die(faces));
              }
              return results;
            })());
          },
          uuid: function() {
            return $(8, 4, 4, 4, 12).map(function() {
              return string(this, '', uuidAlphabet);
            }).join('-');
          }
        })
      }
    };
  });

  $.plugin({
    provides: "render",
    depends: "promise, type, logger"
  }, function() {
    var aka, array_finalize, array_reduce, consume_forever, finalize, log, object_handlers, reduce, register, render;
    log = $.logger("[render]");
    consume_forever = function(promise, opts, p = $.Promise()) {
      if (!$.is("promise", promise)) {
        return $.Promise().resolve(reduce(promise, opts));
      }
      promise.wait(function(err, result) {
        var r;
        if (err) {
          return p.reject(err);
        }
        r = reduce(result, opts);
        if ($.is('promise', r)) {
          return consume_forever(r, opts, p);
        } else {
          return p.resolve(r);
        }
      });
      return p;
    };
    render = function(o, opts = {}) {
      var r;
      return consume_forever(r = reduce([o], opts), opts);
    };
    object_handlers = {
      text: function(o, opts) {
        var ref;
        return reduce(o[(ref = opts.lang) != null ? ref : "EN"], opts);
      }
    };
    render.register = register = function(t, f) {
      return object_handlers[t] = f;
    };
    render.reduce = reduce = function(o, opts) {
      var t;
      return (t = $.type.lookup(o)).reduce(o, t, opts);
    };
    $.type.extend({
      unknown: {
        reduce: function(o, t, opts) {
          return `[ cant reduce type: ${t} ]`;
        }
      },
      string: {
        reduce: $.identity
      },
      html: {
        reduce: $.identity
      },
      null: {
        reduce: function(o, t, opts) {
          return t;
        }
      },
      undefined: {
        reduce: function(o, t, opts) {
          return t;
        }
      },
      number: {
        reduce: function(o, t, opts) {
          return String(o);
        }
      },
      function: {
        reduce: function(o, t, opts) {
          switch (f.length) {
            case 0:
            case 1:
              return reduce(f(opts));
            default:
              return $.Promise.wrap(f, opts);
          }
        }
      },
      object: {
        reduce: function(o, t, opts) {
          var ref;
          if ((t = (ref = o.t) != null ? ref : o.type) in object_handlers) {
            return object_handlers[t].call(o, o, opts);
          } else {
            return `[ no handler for object type: '${t}' ${JSON.stringify(o).substr(0, 20)}... ]`;
          }
        }
      },
      promise: {
        reduce: function(o, t, opts) {
          var finish_q, q;
          q = $.Promise();
          o.wait(finish_q = function(err, result) {
            var r;
            if (err) {
              return q.reject(err);
            }
            if ($.is('promise', r = reduce(result, opts))) {
              return r.wait(finish_q);
            } else {
              return q.resolve(r);
            }
          });
          return q;
        }
      },
      array: {
        reduce: array_reduce = function(o, t, opts) {
          var has_promises, i, i1, len1, m, n, p, q, x;
          p = $.Progress(m = 1);
          q = $.Promise();
          n = [];
          p.wait(function(err) {
            if (err) {
              return q.reject(err);
            } else {
              return q.resolve(finalize(n, opts));
            }
          });
          has_promises = false;
          for (i = i1 = 0, len1 = o.length; i1 < len1; i = ++i1) {
            x = o[i];
            (function(x, i) {
              var finish_p, y;
              n[i] = y = reduce(x, opts);
              if ($.is('promise', y)) {
                has_promises = true;
                p.progress(null, ++m);
                return y.wait(finish_p = function(err, result) {
                  var rp;
                  if (err) {
                    return p.reject(err);
                  }
                  rp = reduce(result, opts);
                  if ($.is('promise', rp)) {
                    return rp.wait(finish_p);
                  } else {
                    return p.resolve(n[i] = rp);
                  }
                });
              }
            })(x, i);
          }
          p.resolve(1);
          if (has_promises) {
            return q;
          } else {
            return finalize(n);
          }
        }
      },
      bling: {
        reduce: array_reduce
      }
    });
    finalize = function(o, opts) {
      var t;
      return (t = $.type.lookup(o)).finalize(o, t, opts);
    };
    $.type.extend({
      unknown: {
        finalize: function(o, t, opts) {
          return `[ cant finalize type: ${t} ]`;
        }
      },
      string: {
        finalize: $.identity
      },
      html: {
        finalize: $.identity
      },
      number: {
        finalize: function(o, t, opts) {
          return String(o);
        }
      },
      array: {
        finalize: array_finalize = function(o, t, opts) {
          var x;
          return ((function() {
            var i1, len1, results;
            results = [];
            for (i1 = 0, len1 = o.length; i1 < len1; i1++) {
              x = o[i1];
              results.push(finalize(x, opts));
            }
            return results;
          })()).join('');
        }
      },
      bling: {
        finalize: array_finalize
      },
      null: {
        finalize: function() {
          return "null";
        }
      },
      undefined: {
        finalize: function() {
          return "undefined";
        }
      }
    });
    aka = function(name) {
      return object_handlers[name];
    };
    register('link', function(o, opts) {
      var k;
      return [
        "<a",
        (function() {
          var i1,
        len1,
        ref,
        results;
          ref = ["href", "name", "target"];
          results = [];
          for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
            k = ref[i1];
            if (k in o) {
              results.push([` ${k}='`,
        o[k],
        "'"]);
            }
          }
          return results;
        })(),
        ">",
        reduce(o.content,
        opts),
        "</a>"
      ];
    });
    register('a', aka('link'));
    register('let', function(o, opts) {
      var ret, save;
      save = opts[o.name];
      opts[o.name] = o.value;
      ret = reduce(o.content, opts);
      if (save === void 0) {
        delete opts[o.name];
      } else {
        opts[o.name] = save;
      }
      return ret;
    });
    register('set', aka('let'));
    register('get', function(o, opts) {
      return reduce(opts[o.name], opts);
    });
    return {
      $: {render}
    };
  });

  $.plugin({
    provides: "sortBy,sortedIndex,sortedInsert,groupBy"
  }, function() {
    return {
      $: {
        sortedIndex: function(array, item, sorter, lo = 0, hi = array.length) {
          var cmp, mid;
          cmp = (function() {
            switch (true) {
              case $.is("string", sorter):
                return function(a, b) {
                  return a[sorter] < b[sorter];
                };
              case $.is("function", sorter):
                return function(a, b) {
                  return sorter(a) < sorter(b);
                };
              default:
                return function(a, b) {
                  return a < b;
                };
            }
          })();
          while (lo < hi) {
            mid = (hi + lo) >>> 1;
            if (cmp(array[mid], item)) {
              lo = mid + 1;
            } else {
              hi = mid;
            }
          }
          return lo;
        }
      },
      sortBy: function(sorter) {
        var a, i1, item, len1, ref;
        a = $();
        ref = this;
        for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
          item = ref[i1];
          a.sortedInsert(item, sorter);
        }
        return a;
      },
      sortedInsert: function(item, sorter) {
        if (this.length === 0) {
          this.push(item);
        } else {
          this.splice($.sortedIndex(this, item, sorter), 0, item);
        }
        return this;
      },
      groupBy: function(sorter) {
        var c, groups, i1, j1, k, k1, len1, len2, len3, name1, name2, ref, ref1, ref2, x;
        groups = {};
        switch ($.type(sorter)) {
          case 'array':
          case 'bling':
            ref = this;
            for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
              x = ref[i1];
              c = ((function() {
                var j1, len2, results;
                results = [];
                for (j1 = 0, len2 = sorter.length; j1 < len2; j1++) {
                  k = sorter[j1];
                  results.push(x[k]);
                }
                return results;
              })()).join(",");
              (groups[c] || (groups[c] = $())).push(x);
            }
            break;
          case 'string':
            ref1 = this;
            for (j1 = 0, len2 = ref1.length; j1 < len2; j1++) {
              x = ref1[j1];
              (groups[name1 = x[sorter]] || (groups[name1] = $())).push(x);
            }
            break;
          case 'function':
            ref2 = this;
            for (k1 = 0, len3 = ref2.length; k1 < len3; k1++) {
              x = ref2[k1];
              (groups[name2 = sorter(x)] || (groups[name2] = $())).push(x);
            }
        }
        return $.valuesOf(groups);
      }
    };
  });

  $.plugin({
    provides: "StateMachine",
    depends: "type, logger"
  }, function() {
    var _callAll, compileStateMachine, escapeAsKey, extractCode, keyEscapes, log;
    _callAll = function(f, c, arg) {
      while ((typeof f) === "function") {
        f = f.call(c, arg);
      }
      return c.state = f;
    };
    keyEscapes = {
      "\n": "n",
      "\r": "r",
      "\t": "t",
      "\\": "\\",
      "'": "'",
      '"': '"'
    };
    escapeAsKey = function(c) {
      return c in keyEscapes && "\\" + keyEscapes[c] || c;
    };
    log = $.logger("[StateMachine]");
    extractCode = function(f, priorText = '') {
      var ref, s;
      if (f == null) {
        return "";
      }
      s = f.toString().replace(/^\s+/, "").replace(/\r/g, "##R##").replace(/\n/g, "##N##").replace(/\/\*(.*)\*\//g, "").replace(/\/\/(.*)(##N##|##R##)*/g, "");
      if (s.indexOf("function") === 0) {
        s = s.replace(/function[^{]*{\s*/, priorText);
      } else if (/\([^{]+ *=>\s*{/.test(s)) {
        s = s.replace(/\([^{]+ *{\s*/, priorText);
      }
      return (ref = s.replace(/return ([^;]+),(\d+)/g, '$1;s=$2').replace(/return /g, 's=').replace(/\s*}$/, '').replace(/([{}\[\],\\\/+*-]*)(##N##|##R##)\s*/g, '$1').replace(/;*(##N##|##R##)\s*/g, ';').replace(/##R##/g, "\r").replace(/##N##/g, "\n").replace(/^\s+/, "").replace(/\s+$/, "").replace(/\r|\n/g, '')) != null ? ref : "";
    };
    compileStateMachine = function(table, debug = false) {
      var _c, _code, err, hasRules, nl, onEnter, parse, priorText, ret, rules, state, trace;
      parse = null;
      nl = debug ? "\n" : "";
      trace = debug && "$.log('state:',s,'i:',i,'c:',c);" || "";
      ret = `s=s|0;for(i=i|0;i<=d.length;i++){c=d[i]||'eof';${trace}switch(s){${nl}`;
      for (state in table) {
        rules = table[state];
        if ('enter' in rules) {
          priorText = `p=s;${nl}`;
          onEnter = extractCode(rules.enter, priorText);
          onEnter = `${nl}if(s!==p){${onEnter};if(s!==p){i--;break}}`;
        } else {
          onEnter = "";
        }
        hasRules = Object.keys(rules).length > ('enter' in rules ? 1 : 0);
        ret += `case ${state}:${onEnter}` + (hasRules && "switch(c){" || "break;\n");
        for (_c in rules) {
          _code = rules[_c];
          if (_c === 'enter') {
            continue;
          }
          ret += _c === 'def' && "default:" || `case '${escapeAsKey(_c)}':`;
          ret += extractCode(_code, priorText) + ";break;";
        }
        ret += hasRules && "}break;" || "";
      }
      ret += "}}return this;";
      ret = ret.replace(/\s+&&\s+/g, '&&').replace(/\s+\|\|\s+/g, '||').replace(/\s+([+*\/=-]*=)\s+/g, '$1');
      try {
        return new Function("d", "s", "i", "p", "c", ret);
      } catch (error1) {
        err = error1;
        $.log("Failed to parse compiled machine: ", ret);
        throw err;
      }
    };
    compileStateMachine.extractCode = extractCode;
    return {
      $: {
        StateMachine: compileStateMachine
      }
    };
  });

  $.plugin({
    provides: "string",
    depends: "type"
  }, function() {
    var escape_single_quotes, safer, slugize, strip_ansi_codes;
    safer = function(f) {
      return function(...a) {
        var err;
        try {
          return f(...a);
        } catch (error1) {
          err = error1;
          return `[toString Error: ${err.message}]`;
        }
      };
    };
    escape_single_quotes = function(s) {
      return s.replace(/([^\\]{1})'/g, "$1\\'");
    };
    strip_ansi_codes = function(s) {
      return String(s).replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
    };
    $.type.extend({
      unknown: {
        string: safer(function(o) {
          var ref;
          return (ref = typeof o.toString === "function" ? o.toString() : void 0) != null ? ref : String(o);
        }),
        repr: safer(function(o) {
          return $.type.lookup(o).string(o);
        }),
        number: safer(function(o) {
          return parseFloat(String(o));
        })
      },
      null: {
        string: function() {
          return "null";
        }
      },
      undefined: {
        string: function() {
          return "undefined";
        }
      },
      buffer: {
        string: safer(function(o) {
          return String(o);
        }),
        repr: safer(function(o) {
          return `Buffer(${JSON.stringify(o.toJSON())})`;
        })
      },
      string: {
        number: safer(parseFloat),
        repr: function(s) {
          return `'${escape_single_quotes(s)}'`;
        }
      },
      array: {
        string: safer(function(a) {
          return `[${a.map($.toString).join(', ')}]`;
        }),
        repr: safer(function(a) {
          return `[${a.map($.toRepr).join(', ')}]`;
        })
      },
      arguments: {
        string: safer(function(a) {
          var x;
          return `[${((function() {
            var i1, len1, results;
            results = [];
            for (i1 = 0, len1 = a.length; i1 < len1; i1++) {
              x = a[i1];
              results.push($.toString(x));
            }
            return results;
          })()).join(', ')}]`;
        }),
        repr: safer(function(a) {
          var x;
          return `[${((function() {
            var i1, len1, results;
            results = [];
            for (i1 = 0, len1 = a.length; i1 < len1; i1++) {
              x = a[i1];
              results.push($.toRepr(x));
            }
            return results;
          })()).join(', ')}]`;
        })
      },
      object: {
        string: safer(function(o) {
          var err, k, ret, v;
          ret = [];
          for (k in o) {
            try {
              v = o[k];
            } catch (error1) {
              err = error1;
              v = `[Error: ${err.message}]`;
            }
            ret.push(`${k}:${$.toString(v)}`);
          }
          return "{" + ret.join(', ') + "}";
        }),
        repr: safer(function(o) {
          var err, k, ret, v;
          ret = [];
          for (k in o) {
            try {
              v = o[k];
            } catch (error1) {
              err = error1;
              v = `[Error: ${err.message}]`;
            }
            ret.push(`"${k}": ${$.toRepr(v)}`);
          }
          return "{" + ret.join(', ') + "}";
        })
      },
      function: {
        repr: function(f) {
          return f.toString();
        },
        string: function(f) {
          return f.toString().replace(/^([^{]*){(?:.|\n|\r)*}$/, '$1{ ... }');
        }
      },
      number: {
        repr: function(n) {
          return String(n);
        },
        string: safer(function(n) {
          switch (false) {
            case n.precision == null:
              return n.toPrecision(n.precision);
            case n.fixed == null:
              return n.toFixed(n.fixed);
            default:
              return String(n);
          }
        })
      }
    });
    return {
      $: {
        toString: function(x) {
          var err;
          if (arguments.length === 0) {
            return "function Bling() { [ ... ] }";
          } else {
            try {
              return $.type.lookup(x).string(x);
            } catch (error1) {
              err = error1;
              return `[$.toString Error: ${err.message}]`;
            }
          }
        },
        toRepr: function(x) {
          return $.type.lookup(x).repr(x);
        },
        px: function(x, delta = 0) {
          return (x != null) && (parseInt(x, 10) + (parseInt(delta) | 0)) + "px";
        },
        capitalize: function(name) {
          return (name.split(" ").map(function(x) {
            return x[0].toUpperCase() + x.substring(1).toLowerCase();
          })).join(" ");
        },
        slugize: slugize = function(phrase, slug = "-") {
          var k, v;
          phrase = (function() {
            switch ($.type(phrase)) {
              case 'null':
              case 'undefined':
                return "";
              case 'object':
                return ((function() {
                  var results;
                  results = [];
                  for (k in phrase) {
                    v = phrase[k];
                    results.push($.slugize(k, slug) + slug + $.slugize(v, slug));
                  }
                  return results;
                })()).join(slug);
              case 'array':
              case 'bling':
                return phrase.map(function(item) {
                  return $.slugize(item, slug);
                }).join(slug);
              default:
                return String(phrase);
            }
          })();
          return phrase.toLowerCase().replace(/^\s+/, '').replace(/\s+$/, '').replace(/\t/g, ' ').replace(/[^A-Za-z0-9. -]/g, '').replace(/\s+/g, '-');
        },
        stubize: slugize,
        dashize: function(name) {
          var c, i, i1, ref, ret;
          ret = "";
          for (i = i1 = 0, ref = (name != null ? name.length : void 0) | 0; (0 <= ref ? i1 < ref : i1 > ref); i = 0 <= ref ? ++i1 : --i1) {
            c = name.charCodeAt(i);
            if ((91 > c && c > 64)) {
              c += 32;
              ret += '-';
            }
            ret += String.fromCharCode(c);
          }
          return ret;
        },
        camelize: function(name) {
          var i;
          name = $.slugize(name);
          name.split('-');
          while ((i = name != null ? name.indexOf('-') : void 0) > -1) {
            name = $.stringSplice(name, i, i + 2, name[i + 1].toUpperCase());
          }
          return name;
        },
        commaize: function(num, comma = ',', dot = '.', currency = '') {
          var a, b, s, sign;
          if ($.is('number', num) && isFinite(num)) {
            s = String(num);
            sign = num < 0 ? "-" : "";
            [a, b] = s.split('.');
            if (a.length > 3) {
              a = $.stringReverse($.stringReverse(a).match(/\d{1,3}/g).join(comma));
            }
            return sign + currency + a + (b != null ? dot + b : "");
          } else if ((typeof num === 'number' && isNaN(num)) || (num === 2e308 || num === (-2e308))) {
            return String(num);
          } else {
            return void 0;
          }
        },
        padLeft: function(s, n, c = " ") {
          var dn;
          dn = n - strip_ansi_codes(s).length;
          if (dn > 0) {
            return $.zeros(dn, c).join('') + s;
          } else {
            return s;
          }
        },
        padRight: function(s, n, c = " ") {
          var dn;
          dn = n - strip_ansi_codes(s).length;
          if (dn > 0) {
            return s + $.zeros(dn, c).join('');
          } else {
            return s;
          }
        },
        stringTruncate: function(s, n, c = '...', sep = ' ') {
          var r, x;
          if (s.length <= n) {
            return s;
          }
          if (c.length >= n) {
            return c;
          }
          s = s.split(sep);
          r = [];
          while (n > 0 && s.length > 0) {
            x = s.shift();
            n -= x.length;
            if (n >= 0) {
              r.push(x);
            }
          }
          return r.join(sep) + c;
        },
        stringCount: function(s, x, i = 0, n = 0) {
          var j;
          if ((j = s.indexOf(x, i)) > i - 1) {
            return $.stringCount(s, x, j + 1, n + 1);
          } else {
            return n;
          }
        },
        stringSplice: function(s, i, j, n) {
          var end, nn, start;
          nn = s.length;
          end = j;
          if (end < 0) {
            end += nn;
          }
          start = i;
          if (start < 0) {
            start += nn;
          }
          return s.substring(0, start) + n + s.substring(end);
        },
        stringReverse: function(s) {
          return s.split('').reverse().join('');
        },
        checksum: function(s) {
          var a, b, i, i1, ref;
          a = 1;
          b = 0;
          for (i = i1 = 0, ref = s.length; (0 <= ref ? i1 < ref : i1 > ref); i = 0 <= ref ? ++i1 : --i1) {
            a = (a + s.charCodeAt(i)) % 65521;
            b = (b + a) % 65521;
          }
          return (b << 16) | a;
        },
        repeat: function(x, n = 2) {
          switch (false) {
            case n !== 1:
              return x;
            case !(n < 1):
              return "";
            case !$.is("string", x):
              return $.zeros(n, x).join('');
            default:
              return $.zeros(n, x);
          }
        },
        stringBuilder: (function() {
          var len;
          len = function(s) {
            return (s != null ? s.toString().length : void 0) | 0;
          };
          return function() {
            var items;
            if ($.is("global", this)) {
              return new $.stringBuilder();
            }
            items = [];
            return $.extend(this, {
              length: 0,
              append: (s) => {
                items.push(s);
                return this.length += len(s);
              },
              prepend: (s) => {
                items.splice(0, 0, s);
                return this.length += len(s);
              },
              clear: () => {
                var ret;
                ret = this.toString();
                items = [];
                this.length = 0;
                return ret;
              },
              toString: function() {
                return items.join("");
              }
            });
          };
        })()
      },
      toString: function() {
        return $.toString(this);
      },
      toRepr: function() {
        return $.toRepr(this);
      },
      replace: function(patt, repl) {
        return this.map(function(s) {
          return s.replace(patt, repl);
        });
      },
      indexOf: function(target, offset = 0) {
        var i, i1, ref, ref1;
        if ($.is('regexp', target)) {
          for (i = i1 = ref = offset, ref1 = this.length; i1 < ref1; i = i1 += 1) {
            if (target.test(this[i])) {
              return i;
            }
          }
          return -1;
        } else {
          return Array.prototype.indexOf.apply(this, arguments);
        }
      }
    };
  });

  $.plugin({
    provides: "symbol",
    depends: "type"
  }, function() {
    var cache, g, symbol;
    symbol = null;
    cache = {};
    g = $.global;
    g['Bling'] = $;
    if (typeof module !== "undefined" && module !== null) {
      module.exports = $;
    }
    $.defineProperty($, "symbol", {
      set: function(v) {
        g[symbol] = cache[symbol];
        cache[symbol = v] = g[v];
        return g[v] = Bling;
      },
      get: function() {
        return symbol;
      }
    });
    return {
      $: {
        symbol: "$",
        noConflict: function() {
          $.symbol = "Bling";
          return Bling;
        }
      }
    };
  });

  $.plugin({
    provides: "synth",
    depends: "StateMachine, type, dom"
  }, function() {
    var common, htmlType, no_eof, rule, synthMachine;
    common = {
      "#": function() {
        return 2;
      },
      ".": function() {
        return 3;
      },
      "[": function() {
        return 4;
      },
      '"': function() {
        return 6;
      },
      "'": function() {
        return 7;
      },
      " ": function() {
        return this.emitText();
      },
      "\t": function() {
        return this.emitText();
      },
      "\n": function() {
        return this.emitText();
      },
      "\r": function() {
        return this.emitText();
      },
      ",": function() {
        return this.emitNodeAndReparent(this.fragment);
      },
      "+": function() {
        var ref;
        return this.emitNodeAndReparent((ref = this.cursor.parentNode) != null ? ref : this.fragment);
      },
      eof: function() {
        return this.emitText();
      }
    };
    no_eof = {
      eof: function() {
        return this.emitError("Unexpected end of input");
      }
    };
    htmlType = $.type.lookup("<html>");
    rule = function(...a) {
      return $.extend(...a);
    };
    synthMachine = {
      reset: function() {
        this.fragment = this.cursor = document.createDocumentFragment();
        this.tag = this.id = this.cls = this.attr = this.val = this.text = "";
        this.attrs = {};
        return this;
      },
      emitError: function(msg) {
        throw new Error(`${msg}: ${this.input}`);
      },
      emitNodeAndReparent: function(nextCursor) {
        var k, node, ref, ref1, ref2, ref3, v;
        if (((ref = this.tag) != null ? ref.length : void 0) > 0) {
          node = document.createElement(this.tag);
          ((ref1 = this.id) != null ? ref1.length : void 0) > 0 && (node.id = this.id);
          ((ref2 = this.cls) != null ? ref2.length : void 0) > 0 && (node.className = this.cls);
          this.cursor.appendChild(node);
          ref3 = this.attrs;
          for (k in ref3) {
            v = ref3[k];
            node.setAttribute(k, v);
          }
        }
        this.cursor = node && (nextCursor || node) || (nextCursor || this.cursor);
        return 0;
      },
      emitText: function() {
        var ref;
        this.emitNodeAndReparent();
        ((ref = this.text) != null ? ref.length : void 0) && this.cursor.appendChild(htmlType.node(this.text) || (this.text = ""));
        return 0;
      },
      run: $.StateMachine([
        {
          enter: function() {
            this.tag = this.id = this.cls = this.attr = this.val = this.text = "";
            this.attrs = {};
            return 1;
          }
        },
        rule({
          def: function(c) {
            this.tag += c;
            return 1;
          }
        },
        common),
        rule({
          def: function(c) {
            this.id += c;
            return 2;
          }
        },
        common),
        rule({
          def: function(c) {
            this.cls += c;
            return 3;
          }
        },
        common,
        {
          enter: function() {
            this.cls += this.cls.length && " " || "";
            return 3;
          },
          ".": function() {
            this.cls += " ";
            return 3;
          }
        }),
        rule({
          def: function(c) {
            this.attr += c;
            return 4;
          }
        },
        no_eof,
        {
          "=": function() {
            return 5;
          },
          "]": function() {
            this.attrs[this.attr] = this.val;
            this.attr = this.val = "";
            return 1;
          }
        }),
        rule({
          def: function(c) {
            this.val += c;
            return 5;
          }
        },
        no_eof,
        {
          "]": function() {
            this.attrs[this.attr] = this.val;
            this.attr = this.val = "";
            return 1;
          }
        }),
        rule({
          def: function(c) {
            this.text += c;
            return 6;
          }
        },
        no_eof,
        {
          '\\': function() {
            return 8;
          },
          '"': function() {
            return this.emitText();
          }
        }),
        rule({
          def: function(c) {
            this.text += c;
            return 7;
          }
        },
        no_eof,
        {
          '\\': function() {
            return 9;
          },
          "'": function() {
            return this.emitText();
          }
        }),
        rule({
          def: function(c) {
            this.text += c;
            return 6;
          }
        },
        no_eof),
        rule({
          def: function(c) {
            this.text += c;
            return 7;
          }
        },
        no_eof)
      ])
    };
    return {
      $: {
        synth: function(expr) {
          var f;
          f = synthMachine.reset().run(expr, 0).fragment;
          return $(f.childNodes.length === 1 ? f.childNodes[0] : f);
        }
      }
    };
  });

  $.plugin({
    depends: "type, function",
    provides: "template"
  }, function() {
    var current_engine, engines, match_forward, template;
    current_engine = null;
    engines = {};
    template = {
      register_engine: function(name, render_func) {
        engines[name] = render_func;
        if (current_engine == null) {
          return current_engine = name;
        }
      },
      render: function(text, args) {
        if (current_engine in engines) {
          return engines[current_engine](text, args);
        }
      }
    };
    $.defineProperty(template, 'engine', {
      get: function() {
        return current_engine;
      },
      set: function(v) {
        if (!v in engines) {
          throw new Error(`invalid template engine: ${v} not one of ${Object.Keys(engines)}`);
        } else {
          return current_engine = v;
        }
      }
    });
    $.defineProperty(template, 'engines', {
      get: function() {
        return $.keysOf(engines);
      }
    });
    template.register_engine('null', (function() {
      return $.identity;
    })());
    match_forward = function(text, find, against, start, stop = -1) {
      var count, i, i1, ref, ref1, t;
      count = 1;
      if (stop < 0) {
        stop = text.length + 1 + stop;
      }
      for (i = i1 = ref = start, ref1 = stop; i1 < ref1; i = i1 += 1) {
        t = text[i];
        if (t === against) {
          count += 1;
        } else if (t === find) {
          count -= 1;
        }
        if (count === 0) {
          return i;
        }
      }
      return -1;
    };
    template.register_engine('pythonic', (function() {
      var chunk_re, compile, render, type_re;
      type_re = /([0-9#0+-]*)\.*([0-9#+-]*)([diouxXeEfFgGcrsqm])((?:.|\n)*)/;
      chunk_re = /%[\(\/]/;
      compile = function(text) {
        var chunks, end, i, i1, j, key, match, n, ref, rest, ret;
        chunks = text.split(chunk_re);
        n = chunks.length;
        ret = [chunks[0]];
        j = 1;
        for (i = i1 = 1, ref = n; i1 < ref; i = i1 += 1) {
          end = match_forward(chunks[i], ')', '(', 0, -1);
          if (end === -1) {
            return `Template syntax error: unmatched '%(' starting at: ${chunks[i].substring(0, 15)}`;
          }
          key = chunks[i].substring(0, end);
          rest = chunks[i].substring(end);
          match = type_re.exec(rest);
          if (match === null) {
            return `Template syntax error: invalid type specifier starting at '${rest}'`;
          }
          rest = match[4];
          ret[j++] = key;
          ret[j++] = match[1] | 0;
          ret[j++] = match[2] | 0;
          ret[j++] = match[3];
          ret[j++] = rest;
        }
        return ret;
      };
      compile.cache = {};
      return render = function(text, values) {
        var cache, fixed, i, i1, j, key, n, output, pad, ref, rest, type, value;
        cache = compile.cache[text];
        if (cache == null) {
          cache = compile.cache[text] = compile(text);
        }
        output = [cache[0]];
        j = 1;
        n = cache.length;
        for (i = i1 = 1, ref = n - 5; i1 <= ref; i = i1 += 5) {
          [key, pad, fixed, type, rest] = cache.slice(i, +(i + 4) + 1 || 9e9);
          value = values[key];
          if (value == null) {
            value = `missing value: ${key}`;
          }
          output[j++] = (function() {
            switch (type) {
              case 'd':
                return "" + parseInt(value, 10);
              case 'f':
                return parseFloat(value).toFixed(fixed);
              case 's':
                return "" + value;
              default:
                return "" + value;
            }
          })();
          if (pad > 0) {
            output[j] = $.padLeft(output[j], pad);
          }
          output[j++] = rest;
        }
        return output.join("");
      };
    })());
    return {
      $: {template}
    };
  });

  $.plugin({
    provides: "throttle",
    depends: "core"
  }, function() {
    var defer, throttle;
    defer = function(f, ctx, args, ms, to) {
      clearTimeout(to);
      to = setTimeout((() => {
        return f.apply(ctx, args);
      }), ms);
      return to;
    };
    throttle = function(f, ctx, args, ms, last) {
      var dt;
      if ((dt = $.now - last) > ms) {
        last += dt;
        f.apply(ctx, args);
      }
      return last;
    };
    return {
      $: {
        throttle: function(ms, f) {
          var last;
          last = 0;
          return function() {
            last = throttle(f, this, arguments, ms, last);
            return null;
          };
        },
        debounce: function(ms, f) {
          var timeout;
          timeout = null;
          return function() {
            var a;
            a = arguments;
            timeout = defer(f, this, arguments, ms, timeout);
            return null;
          };
        },
        rate_limit: function(ms, f) {
          "rate_limit is a combination of throttle and debounce.\n what we want from a stream throttle is to fire at most every _ms_ and\n then fire one last time after a gap of _ms_ at the end.";
          var last, timeout;
          last = 0;
          timeout = null;
          return function() {
            var a;
            a = arguments;
            timeout = defer(f, this, arguments, ms, timeout);
            last = throttle(f, this, arguments, ms, last);
            return null;
          };
        }
      }
    };
  });

  $.plugin({
    provides: 'TNET',
    depends: "type, string, function"
  }, function() {
    var Types, class_index, classes, makeFunction, packOne, packingStack, register, reverseLookup, unpackOne, unpackingStack;
    
    Types = {
      "number": {
        symbol: "#",
        pack: String,
        unpack: Number
      },
      "string": {
        symbol: "'",
        pack: $.identity,
        unpack: $.identity
      },
      "bool": {
        symbol: "!",
        pack: function(b) {
          return String(!!b);
        },
        unpack: function(s) {
          return s === "true";
        }
      },
      "null": {
        symbol: "~",
        pack: function() {
          return "";
        },
        unpack: function() {
          return null;
        }
      },
      "undefined": {
        symbol: "_",
        pack: function() {
          return "";
        },
        unpack: function() {
          return void 0;
        }
      },
      "array": {
        symbol: "]",
        pack: function(a) {
          var y;
          return ((function() {
            var i1, len1, results;
            results = [];
            for (i1 = 0, len1 = a.length; i1 < len1; i1++) {
              y = a[i1];
              results.push(packOne(y));
            }
            return results;
          })()).join('');
        },
        unpack: function(s) {
          var data, one;
          data = [];
          unpackingStack.push(data);
          while (s.length > 0) {
            [one, s] = unpackOne(s);
            data.push(one);
          }
          unpackingStack.pop();
          return data;
        }
      },
      "map": {
        symbol: "M",
        pack: function(m) {
          var ret;
          ret = '';
          m.forEach(function(v, k) {
            return ret += packOne(k) + packOne(v);
          });
          return ret;
        },
        unpack: function(s) {
          var k, m, v;
          m = new Map();
          unpackingStack.push(m);
          while (s.length > 0) {
            [k, s] = unpackOne(s);
            [v, s] = unpackOne(s);
            m.set(k, v);
          }
          unpackingStack.pop();
          return m;
        }
      },
      "bling": {
        symbol: "$",
        pack: function(a) {
          var y;
          return ((function() {
            var i1, len1, results;
            results = [];
            for (i1 = 0, len1 = a.length; i1 < len1; i1++) {
              y = a[i1];
              results.push(packOne(y));
            }
            return results;
          })()).join('');
        },
        unpack: function(s) {
          var data, one;
          data = $();
          unpackingStack.push(data);
          while (s.length > 0) {
            [one, s] = unpackOne(s);
            data.push(one);
          }
          unpackingStack.pop();
          return data;
        }
      },
      "object": {
        symbol: "}",
        pack: function(o) {
          var k, v;
          return ((function() {
            var results;
            results = [];
            for (k in o) {
              v = o[k];
              if (k !== "constructor" && o.hasOwnProperty(k)) {
                results.push(packOne(k) + packOne(v));
              }
            }
            return results;
          })()).join('');
        },
        unpack: function(s) {
          var data, key, value;
          data = {};
          unpackingStack.push(data);
          while (s.length > 0) {
            [key, s] = unpackOne(s);
            [value, s] = unpackOne(s);
            data[key] = value;
          }
          unpackingStack.pop();
          return data;
        }
      },
      "function": {
        symbol: ")",
        pack: function(f) {
          var args, body, name, name_re, parts, s;
          s = f.toString().replace(/(?:\n|\r)+\s*/g, ' ');
          name = "";
          name_re = /function\s*(\w+)\(.*/g;
          if (name_re.test(s)) {
            name = s.replace(name_re, "$1");
          }
          parts = s.replace(/function\s*\w*\(/, '').replace(/\/\*.*\*\//g, '').replace(/}$/, '').split(/\) {/);
          args = parts[0].split(/, */);
          body = parts.slice(1).join(') {').replace(/^\s+/, '').replace(/\s*$/, '');
          return $(name, args, body).map(packOne).join('');
        },
        unpack: function(s) {
          var args, body, err, name, rest;
          [name, rest] = unpackOne(s);
          [args, rest] = unpackOne(rest);
          [body, rest] = unpackOne(rest);
          try {
            return makeFunction(name, args.join(), body);
          } catch (error1) {
            err = error1;
            $.log("Failed to makeFunction.");
            $.log("Arguments:", args.join());
            return $.log("Body:", body);
          }
        }
      },
      "regexp": {
        symbol: "/",
        pack: function(r) {
          return String(r).slice(1, -1);
        },
        unpack: function(s) {
          return RegExp(s);
        }
      },
      "class": {
        symbol: "{",
        pack: function(o) {
          return [Types.function.pack(o), packOne(o.prototype, "object")].join('');
        },
        unpack: function(s) {
          var f, rest;
          [s, rest] = unpackOne(s);
          f = eval(s);
          [f.prototype, rest] = unpackOne(rest);
          return f;
        }
      },
      "class instance": {
        symbol: "C",
        pack: function(o) {
          var ret;
          if (!('constructor' in o)) {
            throw new Error("TNET: cant pack non-class as class");
          }
          if (!(o.constructor in class_index)) {
            throw new Error(`TNET: cant pack unregistered class (name: ${o.constructor.name})`);
          }
          ret = packOne(class_index[o.constructor]);
          packingStack.pop();
          return ret + packOne(o, "object");
        },
        unpack: function(s) {
          var i, obj, rest;
          [i, rest] = unpackOne(s);
          [obj, rest] = unpackOne(rest);
          if (i <= classes.length) {
            obj.__proto__ = classes[i - 1].prototype;
          } else {
            unpackingStack.splice(0, unpackingStack.length);
            throw new Error(`TNET: attempt to unpack unregistered class index: ${i}`);
          }
          return obj;
        }
      },
      "circular reference": {
        symbol: "@",
        pack: function(i) {
          return String(i);
        },
        unpack: function(s) {
          return unpackingStack[parseInt(s, 10)];
        }
      }
    };
    makeFunction = function(name, args, body) {
      eval(`var f = function ${name}(${args}){${body}}`);
      return f;
    };
    classes = [];
    class_index = {};
    register = function(klass) {
      return class_index[klass] || (class_index[klass] = classes.push(klass));
    };
    reverseLookup = {};
    (function() {
      var results, t, v;
      results = [];
      for (t in Types) {
        v = Types[t];
        results.push(reverseLookup[v.symbol] = v);
      }
      return results;
    })();
    unpackingStack = [];
    unpackOne = function(data) {
      var di, i, ref, sym, x;
      if (data && (i = data.indexOf(":")) > 0) {
        di = parseInt(data.slice(0, i), 10);
        if (isFinite(di) && $.is('number', di)) {
          if ((i < (ref = (x = i + 1 + di)) && ref < data.length)) {
            if (sym = reverseLookup[data[x]]) {
              return [sym.unpack(data.slice(i + 1, x)), data.slice(x + 1)];
            }
          }
        }
      }
      return [void 0, data];
    };
    packingStack = [];
    packOne = function(x, forceType) {
      var data, err, i, ref, ref1, ref2, t, tx;
      tx = forceType != null ? forceType : $.type(x);
      if (tx === "unknown" && !((ref = (ref1 = x.constructor) != null ? ref1.name : void 0) === (void 0) || ref === "Object")) {
        tx = "class instance";
      }
      if ((t = Types[tx]) == null) {
        packingStack.splice(0, packingStack.length);
        throw new Error(`TNET: I don't know how to pack type '${tx}' (${((ref2 = x.constructor) != null ? ref2.name : void 0)})`);
      }
      if ((i = packingStack.indexOf(x)) > -1) {
        t = Types["circular reference"];
        x = i;
      }
      packingStack.push(x);
      try {
        data = t.pack(x);
      } catch (error1) {
        err = error1;
        packingStack.splice(0, packingStack.length);
        throw err;
      }
      packingStack.pop();
      return data.length + ":" + data + t.symbol;
    };
    return {
      $: {
        TNET: {
          Types: Types,
          registerClass: register,
          stringify: packOne,
          parse: function(x) {
            var ref;
            return (ref = Bling.TNET.parseOne(x)) != null ? ref[0] : void 0;
          },
          parseOne: function(x) {
            if (Buffer.isBuffer(x)) {
              x = x.toString();
            }
            return unpackOne(x);
          }
        }
      }
    };
  });

  $.plugin({
    provides: "trace",
    depends: "function,type,logger"
  }, function() {
    var time;
    $.type.extend({
      unknown: {
        trace: $.identity
      },
      object: {
        trace: function(label, o, tracer) {
          var k;
          (function() {
            var i1, len1, ref, results;
            ref = Object.keys(o);
            results = [];
            for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
              k = ref[i1];
              results.push(o[k] = $.trace(o[k], `${label}.${k}`, tracer));
            }
            return results;
          })();
          return o;
        }
      },
      array: {
        trace: function(label, o, tracer) {
          var i;
          (function() {
            var i1, ref, results;
            results = [];
            for (i = i1 = 0, ref = o.length; i1 < ref; i = i1 += 1) {
              results.push(o[i] = $.trace(o[i], `${label}[${i}]`, tracer));
            }
            return results;
          })();
          return o;
        }
      },
      bling: {
        trace: function(label, o, tracer) {
          var i;
          (function() {
            var i1, ref, results;
            results = [];
            for (i = i1 = 0, ref = o.length; i1 < ref; i = i1 += 1) {
              results.push(o[i] = $.trace(o[i], `${label}[${i}]`, tracer));
            }
            return results;
          })();
          return o;
        }
      },
      function: {
        trace: function(label, f, tracer) {
          var r;
          label || (label = f.name);
          r = function(...a) {
            var args, elapsed, start;
            start = +(new Date);
            f.apply(this, a);
            label = `${this.name || $.type(this)}.${label}`;
            args = $(a).map($.toRepr).join(',');
            elapsed = (+(new Date) - start).toFixed(0);
            return tracer(`${label}(${args}): ${elapsed}ms`);
          };
          r.toString = function() {
            return `{Trace '${label}' of ${f.toString()}`;
          };
          return r;
        }
      }
    });
    time = function(label, f, logger) {
      var ret, start;
      if (!$.is("string", label)) {
        [f, logger, label] = [label, f, "trace"];
      }
      if (!$.is("function", logger)) {
        logger = $.log;
      }
      start = +(new Date);
      ret = f();
      logger(`[${label}] ${(+(new Date) - start).toFixed(0)}ms`);
      return ret;
    };
    return {
      $: {
        time: time,
        trace: function(label, o, tracer) {
          if (!$.is("string", label)) {
            [tracer, o] = [o, label];
          }
          tracer || (tracer = $.log);
          label || (label = "");
          return $.type.lookup(o).trace(label, o, tracer);
        }
      }
    };
  });

  $.plugin({
    depends: "dom"
  }, function() {
    var COMMASEP, accel_props_re, speeds, testStyle, transformProperty, transitionDuration, transitionProperty, transitionTiming, updateDelay;
    COMMASEP = ", ";
    speeds = {
      "slow": 700,
      "medium": 500,
      "normal": 300,
      "fast": 100,
      "instant": 0,
      "now": 0
    };
    accel_props_re = /(?:scale(?:3d)*|translate(?:[XYZ]|3d)*|rotate(?:[XYZ]|3d)*)/;
    updateDelay = 30;
    testStyle = document.createElement("div").style;
    transformProperty = "transform";
    transitionProperty = "transition-property";
    transitionDuration = "transition-duration";
    transitionTiming = "transition-timing-function";
    if ("WebkitTransform" in testStyle) {
      transformProperty = "-webkit-transform";
      transitionProperty = "-webkit-transition-property";
      transitionDuration = "-webkit-transition-duration";
      transitionTiming = "-webkit-transition-timing-function";
    } else if ("MozTransform" in testStyle) {
      transformProperty = "-moz-transform";
      transitionProperty = "-moz-transition-property";
      transitionDuration = "-moz-transition-duration";
      transitionTiming = "-moz-transition-timing-function";
    } else if ("OTransform" in testStyle) {
      transformProperty = "-o-transform";
      transitionProperty = "-o-transition-property";
      transitionDuration = "-o-transition-duration";
      transitionTiming = "-o-transition-timing-function";
    }
    return {
      $: {
        duration: function(speed) {
          var d;
          d = speeds[speed];
          if (d != null) {
            return d;
          }
          return parseFloat(speed);
        }
      },
      transform: function(end_css, speed, easing, callback) {
        var css, duration, i, ii, props, trans;
        if ($.is("function", speed)) {
          callback = speed;
          speed = easing = null;
        } else if ($.is("function", easing)) {
          callback = easing;
          easing = null;
        }
        if (speed == null) {
          speed = "normal";
        }
        easing || (easing = "ease");
        duration = $.duration(speed) + "ms";
        props = [];
        trans = "";
        css = {};
        for (i in end_css) {
          if (accel_props_re.test(i)) {
            ii = end_css[i];
            if (ii.join) {
              ii = $(ii).px().join(COMMASEP);
            } else if (ii.toString) {
              ii = ii.toString();
            }
            trans += " " + i + "(" + ii + ")";
          } else {
            css[i] = end_css[i];
          }
        }
        for (i in css) {
          props.push(i);
        }
        if (trans) {
          props.push(transformProperty);
        }
        css[transitionProperty] = props.join(COMMASEP);
        css[transitionDuration] = props.map(function() {
          return duration;
        }).join(COMMASEP);
        css[transitionTiming] = props.map(function() {
          return easing;
        }).join(COMMASEP);
        if (trans) {
          css[transformProperty] = trans;
        }
        this.css(css);
        if (callback) {
          return this.delay(duration, $.bound(this, callback));
        }
      },
      hide: function(callback) {
        this.each(function() {
          if (this.style) {
            this._display = "";
            if (this.style.display === !"none") {
              this._display = this.syle.display;
            }
            return this.style.display = "none";
          }
        }).trigger("hide");
        if (callback) {
          this.delay(updateDelay, $.bound(this, callback));
        }
        return this;
      },
      show: function(callback) {
        this.each(function() {
          if (this.style) {
            this.style.display = this._display;
            return delete this._display;
          }
        }).trigger("show");
        if (callback) {
          this.delay(updateDelay, $.bound(this, callback));
        }
        return this;
      },
      toggle: function(callback) {
        return this.weave(this.css("display")).fold(function(display, node) {
          if (display === "none") {
            node.style.display = node._display || "";
            delete node._display;
            $(node).trigger("show");
          } else {
            node._display = display;
            node.style.display = "none";
            $(node).trigger("hide");
          }
          return node;
        }).delay(updateDelay, $.bound(this, callback));
      },
      fadeIn: function(speed, callback) {
        return this.css('opacity', '0.0').show(function() {
          return this.transform({
            opacity: "1.0",
            translate3d: [0, 0, 0]
          }, speed, callback);
        });
      },
      fadeOut: function(speed, callback, x = 0.0, y = 0.0) {
        return this.transform({
          opacity: "0.0",
          translate3d: [x, y, 0.0]
        }, speed, function() {
          return this.hide($.bound(this, callback));
        });
      },
      fadeLeft: function(speed, callback) {
        return this.fadeOut(speed, callback, "-" + this.width().first(), 0.0);
      },
      fadeRight: function(speed, callback) {
        return this.fadeOut(speed, callback, this.width().first(), 0.0);
      },
      fadeUp: function(speed, callback) {
        return this.fadeOut(speed, callback, 0.0, "-" + this.height().first());
      },
      fadeDown: function(speed, callback) {
        return this.fadeOut(speed, callback, 0.0, this.height().first());
      }
    };
  });

  $.plugin({
    provides: 'Trie'
  }, function() {
    var Trie;
    Trie = (function() {
      var find, insert;

      class Trie {
        constructor() {
          this.length = 0;
        }

        insert(item, key = String(item)) {
          return insert(this, item, key.toLowerCase(), 0);
        }

        find(prefix) {
          return find(this, prefix.toLowerCase(), 0);
        }

      };

      insert = function(t, item, key, n) {
        var name1, o;
        t.length++;
        if (n < key.length) {
          o = t.children || (t.children = {});
          insert((o[name1 = key[n]] || (o[name1] = new Trie)), item, key, n + 1);
        } else {
          (t.values || (t.values = [])).push(item);
        }
        return t;
      };

      find = function*(t, k, n) {
        var c, child, end, i1, len1, ref, ref1, v;
        end = n >= k.length;
        if (end && t.values) {
          ref = t.values;
          for (i1 = 0, len1 = ref.length; i1 < len1; i1++) {
            v = ref[i1];
            if (((yield v)) === false) {
              break;
            }
          }
        } else {
          ref1 = t.children;
          for (c in ref1) {
            child = ref1[c];
            if (end || c === k[n]) {
              yield* find(child,k,n+1);
            }
          }
        }
        return null;
      };

      return Trie;

    }).call(this);
    return {
      $: {Trie}
    };
  });

  $.plugin({
    provides: "type,is,inherit,extend,defineProperty,isType,are,as,isSimple,isDefined,isEmpty",
    depends: "compat"
  }, function() {
    var __toString, _type, inherit, isType, maxHash;
    __toString = Object.prototype.toString;
    isType = function(T, o) {
      if (o == null) {
        return T === o || T === "null" || T === "undefined";
      } else {
        return ((o.constructor != null) && (o.constructor === T || o.constructor.name === T)) || __toString.apply(o) === `[object ${T}]` || isType(T, o.__proto__);
      }
    };
    inherit = function(parent, ...objs) {
      var obj, ref;
      if (!(objs.length > 0)) {
        return;
      }
      obj = objs.shift();
      if (typeof parent === "function") {
        parent = parent.prototype;
      }
      if ((ref = parent.__proto__) === Object.prototype || ref === null || ref === (void 0)) {
        parent.__proto__ = obj.__proto__;
      }
      obj.__proto__ = parent;
      if (objs.length > 0) {
        return inherit(obj, ...objs);
      } else {
        return obj;
      }
    };
    _type = (function() {
      var _extend, _with_cache, _with_insert, base, cache, lookup, order, register;
      cache = {};
      base = {
        name: 'unknown',
        is: function() {
          return true;
        }
      };
      order = [];
      _with_cache = {};
      _with_insert = function(method, type) {
        var a, i;
        a = (_with_cache[method] || (_with_cache[method] = []));
        if ((i = a.indexOf(type)) === -1) {
          return a.push(type);
        }
      };
      register = function(name, data) {
        var key;
        data.is || (data.is = function() {
          return false;
        });
        if (name in cache) {
          return _extend(name, data);
        }
        if (!(name in cache)) {
          order.unshift(name);
        }
        cache[data.name = name] = base !== data ? inherit(base, data) : data;
        cache[name][name] = function(o) {
          return o;
        };
        for (key in cache[name]) {
          _with_insert(key, cache[name]);
        }
        return cache[name];
      };
      _extend = function(name, data) {
        var k, method;
        if (typeof name === "string") {
          cache[name] || (cache[name] = register(name, {}));
          cache[name] = extend(cache[name], data);
          for (method in data) {
            _with_insert(method, cache[name]);
          }
        } else if (typeof name === "object") {
          for (k in name) {
            _extend(k, name[k]);
          }
        }
        return null;
      };
      lookup = function(obj) {
        var i1, len1, name;
        for (i1 = 0, len1 = order.length; i1 < len1; i1++) {
          name = order[i1];
          if (cache[name].is.call(obj, obj)) {
            return cache[name];
          }
        }
        return null;
      };
      register("unknown", base);
      register("object", {
        is: function(o) {
          var ref, ref1;
          return (o != null) && (typeof o === "object") && ((ref = (ref1 = o.constructor) != null ? ref1.name : void 0) === (void 0) || ref === "Object");
        }
      });
      register("array", {
        is: Array.isArray || function(o) {
          return isType(Array, o);
        }
      });
      register("map", {
        is: function(o) {
          return o && (o instanceof Map);
        }
      });
      register("buffer", {
        is: $.global.Buffer.isBuffer || function() {
          return false;
        }
      });
      register("error", {
        is: function(o) {
          return isType('Error', o);
        }
      });
      register("regexp", {
        is: function(o) {
          return isType('RegExp', o);
        }
      });
      register("string", {
        is: function(o) {
          return typeof o === "string";
        }
      });
      register("number", {
        is: function(o) {
          return typeof o === "number" && !isNaN(o);
        }
      });
      register("bool", {
        is: function(o) {
          return typeof o === "boolean";
        }
      });
      register("function", {
        is: function(o) {
          return typeof o === "function";
        }
      });
      register("class", {
        is: function(o) {
          var props;
          return typeof o === "function" && ('prototype' in (props = Object.getOwnPropertyDescriptors(o))) && !('arguments' in props);
        }
      });
      register("global", {
        is: function(o) {
          return typeof o === "object" && 'setInterval' in o;
        }
      });
      register("arguments", {
        is: function(o) {
          return typeof o === "object" && 'callee' in o && 'length' in o;
        }
      });
      register("undefined", {
        is: function(x) {
          return x === void 0;
        }
      });
      register("null", {
        is: function(x) {
          return x === null;
        }
      });
      return extend((function(o) {
        return lookup(o).name;
      }), {
        register: register,
        lookup: lookup,
        extend: _extend,
        get: function(t) {
          return cache[t];
        },
        is: function(t, o) {
          var ref, ref1;
          return (ref = (ref1 = cache[t]) != null ? ref1.is.call(o, o) : void 0) != null ? ref : false;
        },
        as: function(t, o, ...rest) {
          var base1;
          return typeof (base1 = lookup(o))[t] === "function" ? base1[t](o, ...rest) : void 0;
        },
        with: function(f) {
          var ref;
          return (ref = _with_cache[f]) != null ? ref : [];
        }
      });
    })();
    _type.extend({
      unknown: {
        array: function(o) {
          return [o];
        }
      },
      null: {
        array: function() {
          return [];
        }
      },
      undefined: {
        array: function() {
          return [];
        }
      },
      array: {
        array: function(o) {
          return o;
        }
      },
      number: {
        array: function(o) {
          return $.extend(new Array(o), {
            length: 0
          });
        }
      },
      arguments: {
        array: function(o) {
          return Array.prototype.slice.apply(o);
        }
      }
    });
    maxHash = 0xFFFFFFFF;
    _type.register("bling", {
      is: function(o) {
        return o && isType($, o);
      },
      array: function(o) {
        return (o && o.toArray()) || [];
      },
      hash: function(o) {
        return o.map($.hash).reduce(function(a, x) {
          return ((a * a) + x) % maxHash;
        });
      },
      string: function(o) {
        return $.symbol + "([" + o.map(function(x) {
          return $.type.lookup(x).string(x);
        }).join(", ") + "])";
      },
      repr: function(o) {
        return $.symbol + "([" + o.map(function(x) {
          return $.type.lookup(x).repr(x);
        }).join(", ") + "])";
      }
    });
    _type.in = function(...types) {
      var i1, len1, obj, ref, type;
      ref = types, [...types] = ref, [obj] = splice.call(types, -1);
      for (i1 = 0, len1 = types.length; i1 < len1; i1++) {
        type = types[i1];
        if ($.is(type, obj)) {
          return true;
        }
      }
      return false;
    };
    return {
      $: {
        inherit: inherit,
        extend: extend,
        defineProperty: function(o, name, opts) {
          Object.defineProperty(o, name, extend({
            configurable: true,
            enumerable: true
          }, opts));
          return o;
        },
        isType: isType,
        type: _type,
        is: _type.is,
        are: function(type, ...args) {
          var a, i1, len1;
          for (i1 = 0, len1 = args.length; i1 < len1; i1++) {
            a = args[i1];
            if (!$.is(type, a)) {
              return false;
            }
          }
          return true;
        },
        as: _type.as,
        isDefined: function(o) {
          return o != null;
        },
        isSimple: function(o) {
          return _type.in("string", "number", "bool", o);
        },
        isEmpty: function(o) {
          return (o === "" || o === null || o === (void 0)) || o.length === 0 || (typeof o === "object" && Object.keys(o).length === 0);
        }
      },
      defineProperty: function(name, opts) {
        return this.each(function() {
          return $.defineProperty(this, name, opts);
        });
      }
    };
  });

  $.plugin({
    depends: 'math',
    provides: 'units'
  }, function() {
    var UNIT_RE, conv, convert, fill, init, locker, makeUnitRegex, parseUnits, set, units;
    units = $(["px", "pt", "pc", "em", "%", "in", "cm", "mm", "ex", "lb", "kg", "yd", "ft", "m", ""]);
    UNIT_RE = null;
    (makeUnitRegex = function() {
      var joined;
      joined = units.filter(/.+/).join('|');
      return UNIT_RE = new RegExp(`(\\d+\\.*\\d*)((?:${joined})/*(?:${joined})*)$`);
    })();
    parseUnits = function(s) {
      if (UNIT_RE.test(s)) {
        return UNIT_RE.exec(s)[2];
      }
      return "";
    };
    conv = function(a, b) {
      var denom_a, denom_b, numer_a, numer_b;
      [numer_a, denom_a] = a.split('/');
      [numer_b, denom_b] = b.split('/');
      if ((denom_a != null) && (denom_b != null)) {
        return conv(denom_b, denom_a) * conv(numer_a, numer_b);
      }
      if (a in conv && (b in conv[a])) {
        return conv[a][b]();
      }
      return 0;
    };
    locker = function(x) {
      return function() {
        return x;
      };
    };
    fill = function() {};
    set = function(from, to, f) {
      conv[from] || (conv[from] = {});
      conv[from][to] = f;
      if (units.indexOf(from) === -1) {
        units.push(from);
      }
      if (units.indexOf(to) === -1) {
        units.push(to);
      }
      makeUnitRegex();
      return fill();
    };
    init = function() {
      $.type.register("units", {
        is: function(x) {
          return typeof x === "string" && UNIT_RE.test(x);
        },
        number: function(x) {
          return parseFloat(x);
        },
        string: function(x) {
          return `'${x}'`;
        }
      });
      set('pc', 'pt', function() {
        return 12;
      });
      set('in', 'pt', function() {
        return 72;
      });
      set('in', 'px', function() {
        return 96;
      });
      set('in', 'cm', function() {
        return 2.54;
      });
      set('m', 'ft', function() {
        return 3.281;
      });
      set('yd', 'ft', function() {
        return 3;
      });
      set('cm', 'mm', function() {
        return 10;
      });
      set('m', 'cm', function() {
        return 100;
      });
      set('m', 'meter', function() {
        return 1;
      });
      set('m', 'meters', function() {
        return 1;
      });
      set('ft', 'feet', function() {
        return 1;
      });
      set('km', 'm', function() {
        return 1000;
      });
      set('em', 'px', function() {
        var w, x;
        w = 0;
        try {
          x = $("<span style='font-size:1em;visibility:hidden'>x</span>").appendTo("body");
          w = x.width().first();
          x.remove();
        } catch (error1) {}
        return w;
      });
      set('ex', 'px', function() {
        var w, x;
        w = 0;
        try {
          x = $("<span style='font-size:1ex;visibility:hidden'>x</span>").appendTo("body");
          w = x.width().first();
          x.remove();
        } catch (error1) {}
        return w;
      });
      set('ex', 'em', function() {
        return 2;
      });
      set('rad', 'deg', function() {
        return 57.3;
      });
      set('s', 'sec', function() {
        return 1;
      });
      set('s', 'ms', function() {
        return 1000;
      });
      set('ms', 'ns', function() {
        return 1000000;
      });
      set('min', 'sec', function() {
        return 60;
      });
      set('hr', 'min', function() {
        return 60;
      });
      set('hr', 'hour', function() {
        return 1;
      });
      set('hr', 'hours', function() {
        return 1;
      });
      set('day', 'hr', function() {
        return 24;
      });
      set('day', 'days', function() {
        return 1;
      });
      set('y', 'year', function() {
        return 1;
      });
      set('y', 'years', function() {
        return 1;
      });
      set('y', 'd', function() {
        return 365.25;
      });
      set('g', 'gram', function() {
        return 1;
      });
      set('g', 'grams', function() {
        return 1;
      });
      set('kg', 'g', function() {
        return 1000;
      });
      set('lb', 'g', function() {
        return 453.6;
      });
      set('lb', 'oz', function() {
        return 16;
      });
      set('f', 'frame', function() {
        return 1;
      });
      set('f', 'frames', function() {
        return 1;
      });
      set('sec', 'f', function() {
        return 60;
      });
      (fill = function() {
        var a, b, c, i1, infered, j1, k1, l1, len1, len2, len3, len4, one;
        conv[''] = {};
        one = locker(1.0);
        for (i1 = 0, len1 = units.length; i1 < len1; i1++) {
          a = units[i1];
          conv[a] || (conv[a] = {});
          conv[a][a] = conv[a][''] = conv[''][a] = one;
        }
        infered = 1;
        while (infered > 0) {
          infered = 0;
          for (j1 = 0, len2 = units.length; j1 < len2; j1++) {
            a = units[j1];
            if (!(a !== '')) {
              continue;
            }
            conv[a] || (conv[a] = {});
            for (k1 = 0, len3 = units.length; k1 < len3; k1++) {
              b = units[k1];
              if (!(b !== '')) {
                continue;
              }
              if ((!conv(a, b)) && (conv(b, a))) {
                conv[a][b] = locker(1.0 / conv(b, a));
                infered += 1;
              }
              for (l1 = 0, len4 = units.length; l1 < len4; l1++) {
                c = units[l1];
                if (c !== '') {
                  if ((conv(a, b)) && (conv(b, c)) && (!conv(a, c))) {
                    conv[a][c] = locker(conv(a, b) * conv(b, c));
                    infered += 1;
                  }
                }
              }
            }
          }
        }
        return null;
      })();
      return $.units.enable = function() {};
    };
    convert = function(unit, number) {
      var c, f, u;
      f = parseFloat(number);
      u = parseUnits(number);
      c = conv(u, unit);
      if (!(isFinite(c) && isFinite(f))) {
        return number;
      }
      return `${f * c}${unit}`;
    };
    return {
      $: {
        units: {
          enable: init,
          set: set,
          get: conv,
          convertTo: convert
        }
      },
      convertTo: function(unit) {
        return this.map(function(x) {
          return convert(unit, x);
        });
      },
      unitMap: function(f) {
        return this.map(function(x) {
          var n;
          return f.call((n = parseFloat(x)), n) + parseUnits(x);
        });
      }
    };
  });

  $.plugin({
    depends: "type",
    provides: "url,URL"
  }, function() {
    var clean, host_port_re, parse, parse_host, stringify, url_re, user_pass_re, username_re;
    url_re = /\b(?:([a-z+]+):)(?:\/{1,2}([^?\/#]*?))(\/[^?]*)*(?:\?([^#]+))*(?:#([^\s]+))*$/i;
    user_pass_re = /^([^:]+):([^@]+)@/;
    username_re = /^([^:@]+)@/;
    host_port_re = /^([^:]+):(\d+)/;
    parse_host = function(host) {
      var m, ret;
      if (!((host != null) && host.length > 0)) {
        return {};
      }
      ret = {host};
      if (ret.host.indexOf(",") > -1) {
        $.extend(ret, {
          hosts: ret.host.split(",").map(parse_host),
          host: void 0
        });
      } else {
        if ((m = ret.host.match(user_pass_re))) {
          $.extend(ret, {
            username: m[1],
            password: m[2],
            host: ret.host.replace(user_pass_re, '')
          });
        } else if ((m = ret.host.match(username_re))) {
          $.extend(ret, {
            username: m[1],
            host: ret.host.replace(username_re, '')
          });
        }
        if ((m = ret.host.match(host_port_re))) {
          $.extend(ret, {
            host: m[1],
            port: m[2]
          });
        }
      }
      return ret;
    };
    parse = function(str, parseQuery = false) {
      var i, i1, len1, m, pair, query, ref, ref1, ref2, ref3, ret;
      ret = (m = str != null ? str.match(url_re) : void 0) ? {
        protocol: m[1],
        host: m[2],
        path: m[3],
        query: (ref = m[4]) != null ? ref.replace(/^\?/, '') : void 0,
        hash: (ref1 = m[5]) != null ? ref1.replace(/^#/, '') : void 0
      } : null;
      if (ret != null) {
        if (parseQuery) {
          query = (ref2 = ret.query) != null ? ref2 : "";
          ret.query = Object.create(null);
          ref3 = query.split('&');
          for (i1 = 0, len1 = ref3.length; i1 < len1; i1++) {
            pair = ref3[i1];
            if ((i = pair.indexOf('=')) > -1) {
              ret.query[pair.substring(0, i)] = unescape(pair.substring(i + 1));
            } else if (pair.length > 0) {
              ret.query[pair] = null;
            }
          }
          delete ret.query[""];
        }
        $.extend(ret, parse_host(ret.host));
        $.keysOf(ret).each(function(key) {
          switch ($.type(ret[key])) {
            case "null":
            case "undefined":
              delete ret[key];
              break;
            case "string":
              if (ret[key].length === 0) {
                delete ret[key];
              }
          }
          return null;
        });
      }
      return ret;
    };
    clean = function(val, re, prefix = '', suffix = '') {
      var x;
      x = val != null ? val : "";
      if (x && !re.test(x)) {
        return prefix + x + suffix;
      } else {
        return x;
      }
    };
    stringify = function(url) {
      var k, v;
      if ($.is('object', url.query)) {
        url.query = ((function() {
          var ref, results;
          ref = url.query;
          results = [];
          for (k in ref) {
            v = ref[k];
            results.push(`${k}=${v}`);
          }
          return results;
        })()).join("&");
      }
      return [clean(url.protocol, /:$/, '', ':'), clean(url.host, /^\//, '//'), clean(url.port, /^:/, ':'), clean(url.path, /^\//, '/'), clean(url.query, /^\?/, '?'), clean(url.hash, /^#/, '#')].join('');
    };
    return {
      $: {
        URL: {parse, stringify}
      }
    };
  });

  $.plugin({
    provides: "watchProperty",
    depends: "type"
  }, function() {
    var OP_CHANGE, OP_DELETE, OP_INSERT, watchArray, watchProperty;
    OP_CHANGE = 'change';
    OP_INSERT = 'insert';
    OP_DELETE = 'delete';
    watchProperty = function(obj, key, cb, prefix = "") {
      var first, get, i, prop, ref;
      if (typeof key === 'string' && (i = key.indexOf(".")) > -1) {
        first = key.substr(0, i);
        return watchProperty(obj[first], key.substr(i + 1), cb, ((prefix != null ? prefix.length : void 0) && prefix + '.' + first) || first);
      }
      if ($.is('array', obj[key])) {
        watchArray(obj[key], cb, ((prefix != null ? prefix.length : void 0) && prefix + '.' + key) || key);
      }
      prop = Object.getOwnPropertyDescriptor(obj, key);
      return $.defineProperty(obj, key, {
        get: get = (ref = prop.get) != null ? ref : function() {
          return prop.value;
        },
        set: $.compose($.partial(cb, OP_CHANGE, ((prefix != null ? prefix.length : void 0) && prefix + '.' + key) || key), prop.set || (prop.writable && function(v) {
          return prop.value = v;
        }) || get)
      });
    };
    watchArray = function(arr, cb, prefix = "") {
      var _watch, pcb, rebindAll;
      pcb = function(op, key, value) {
        return cb(op, ((prefix != null ? prefix.length : void 0) && prefix + '.' + key) || key, value);
      };
      _watch = function(method, _cb) {
        var supr;
        supr = arr[method];
        return arr[method] = function(...a) {
          try {
            return supr.apply(arr, a);
          } finally {
            _cb.apply(arr, a);
          }
        };
      };
      (rebindAll = function() {
        var i, i1, ref;
        for (i = i1 = 0, ref = arr.length; i1 < ref; i = i1 += 1) {
          watchProperty(arr, i, pcb);
        }
        return null;
      })();
      _watch('push', function(item) {
        var i;
        i = this.length - 1;
        watchProperty(this, i, pcb);
        return pcb(OP_INSERT, i, item);
      });
      _watch('unshift', function(item) {
        rebindAll();
        return pcb(OP_INSERT, 0, item);
      });
      _watch('pop', function() {
        return pcb(OP_DELETE, this.length, 1);
      });
      _watch('shift', function() {
        rebindAll();
        return pcb(OP_DELETE, this.length, 1);
      });
      _watch('splice', function(i, n, v) {
        if (v !== void 0) {
          i += 1;
          n -= 1;
        } else if (n > 0) {
          i = this.length;
        }
        if (n > 0) {
          return pcb(OP_DELETE, i, n);
        }
      });
      return arr;
    };
    return {
      $: {watchProperty}
    };
  });

}).call(this);

//# sourceMappingURL=bling.js.map
